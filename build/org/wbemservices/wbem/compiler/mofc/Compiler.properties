#
# EXHIBIT A - Sun Industry Standards Source License
# 
# "The contents of this file are subject to the Sun Industry
# Standards Source License Version 1.2 (the "License");
# You may not use this file except in compliance with the
# License. You may obtain a copy of the 
# License at http://wbemservices.sourceforge.net/license.html
# 
# Software distributed under the License is distributed on
# an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
# express or implied. See the License for the specific
# language governing rights and limitations under the License.
# 
# The Original Code is WBEM Services.
# 
# The Initial Developer of the Original Code is:
# Sun Microsystems, Inc.
# 
# Portions created by: Sun Microsystems, Inc.
# are Copyright © 2001 Sun Microsystems, Inc.
# 
# All Rights Reserved.
# 
# Contributor(s): _______________________________________
#

TITLE=CIM Mof Complier
COPYRIGHT=Copyright (c) 2002 Sun Microsystems, Inc.\nAll Rights Reserved

MOFC_COMMAND_LINE_ARGS= Usage: mofcomp [-options] mof\n\nwhere options include:\n\t-h\t\tPrint out this message\n\t-version\tPrint out the build version\n\t-v\t\tTurn on verbose mode\n\t-c cimom_host\tHost where the CIM Object Manager runs\n\t-n namespace\tnamespace to compile mof(s) in\n\t-u username\tUsername for CIM Object Manager connection\n\t-p password\tPassword for user specified by -u\n\t-o directory\tDirectory for compiler output\n\t-j beanFile\tBean generator configuration file\n\t-Q\t\tSet qualifier types instead of create\n\t-C\t\tSet class instead of create\n\t-I\t\tSet instance instead of create\n\t-x\t\tConvert to XML\n\n\n\tDeprecated options (to be removed next release):\n\t-sq\t\tSet qualifier types instead of create\n\t-sc\t\tSet class instead of create\n\t-si\t\tSet instance instead of create\n\n

SUCCESS = Compilation succeeded.
SYN_SUCCESS = Syntax check succeeded.
NONE=
ADDING_CLASS = Adding class {0}
SETTING_CLASS = Setting class {0}
ADDING_INSTANCE = Adding instance of {0}
SETTING_INSTANCE = Setting instance of {0}
ADDING_QUALIFIERTYPE = Adding qualifier type {0}
SETTING_QUALIFIERTYPE = Setting qualifier type {0}

# Error Types
ERR_SEM=Semantic Error: 
ERR_PAR=Parsing Error: 
ERR_EXC=Exception: 
ERROR_LINE = Error at line {1} in file {0}
ERROR_WARNING = Warning at line {1} in file {0} - compilation proceeding ...

# Errors
ERR_CIMOM_CONNECTION=Cannot connect to CIMOM
ERR_NAMESPACE_CREATION=Namspace {0} creation error
ERR_ILLEGAL_SCHEMA_NAME=Schema {0} is an illegal schema name
ERR_ILLEGAL_VALUES=The qualifier has an illegal value.
ERR_SETTING_QUALIFIER_TYPE=Error trying to set qualifier type: {0}
ERR_ASSOC_QUALIFIER_MISUSE=There was a misuse of the association qualifier.
ERR_PARAMETER_EXISTS=The parameter {0} already exists...
ERR_FEATURE_REDEFINED=The {0} property/reference/method was already defined in this class
ERR_NO_SUCH_CLASS=There is no such class {0} for this instance.
ERR_EXC_SET_CLASS=The following exception was thrown by setClass: {0}
ERR_EXC_SET_INST=The following exception was thrown by setInstance: {0}
ERR_EXC_SET_QUAL=The following exception was thrown by setQualifier: {0}
ERR_PARSE=Error in file {0} at line {1}.
ERR_QUALIFIER_LIST_STR=Error in qualifier list {0}
NO_FILE=Please specify a filename.
NO_SUCH_ALIAS=Alias {0} not found.

# Debug Statements (These do not have to be intenationalized)
METHOD_START=Entered Method: {0}
METHOD_END=Exiting Method: {0}

# Exception handling

DEFAULT = CIM Exception
PDEFAULT = CIM Exception: {0}

RMIERROR = RMI {0} Exception: {1}
XMLERROR = XML {0} Exception: {1}

UNKNOWNHOST = Unknown host {0}.
NO_CIMOM =  CIMOM {0} not detected.

NO_SUCH_QUALIFIER1 = Qualifier {0} not found.
NO_SUCH_QUALIFIER2 = Qualifier {1} not found for {0}.
SCOPE_ERROR = Qualifier {1} for {0} does not have a {2} scope.
NO_QUALIFIER_VALUE = Qualifier {0} for {1} has no value.
NO_OVERRIDDEN_PROPERTY = Property {1} overridden by {0} does not exist in class hierarchy.
NO_OVERRIDDEN_METHOD = Method {1} overridden by {0} does not exist in class hierarchy.
PROPERTY_OVERRIDDEN = Property {0} cannot override {1} which is already overridden by {2}
METHOD_OVERRIDDEN = Method {0} cannot override {1} which is already overridden by {2}
CLASS_REFERENCE = Class {1} must be declared as an association to have reference {0}.
NEW_KEY = Class {1} cannot define new key {0}.
KEY_REQUIRED = Concrete (non-abstract) class {0} needs at least one key.
REF_REQUIRED = Association class {0} needs at least two refs.
KEY_OVERRIDE = Non-key {0} cannot override key {1}.
NOT_INSTANCE_PROVIDER = Provider {1} for class {0} does not implement InstanceProvider.
NOT_METHOD_PROVIDER = Provider {1} for class {0} does not implement MethodProvider.
NOT_PROPERTY_PROVIDER = Provider {1} for class {0} does not implement PropertyProvider.
NO_INSTANCE_PROVIDER = Instance provider {1} for class {0} not found.
NO_METHOD_PROVIDER = Method provider {1} for method {0} not found.
NO_PROPERTY_PROVIDER = Property provider {1} for property {0} not found.
NO_CLASS_SCHEMA = Class {0} has no schema prefix.
ABSTRACT_INSTANCE = Abstract class {0} cannot have instances.
NO_SUCH_SESSION = No such session {0}.
INVALID_QUALIFIER_NAME = Invalid qualifier name {0}
NO_SUCH_METHOD = Method {0} does not exist in class {1}.
CHECKSUM_ERROR = Checksum not valid.
SIGNATURE_ERROR = Signature not verified.
NO_SUCH_PRINCIPAL = Principal {0} not found. Make sure that user {0} is available on the system that the CIMOM runs.
INVALID_CREDENTIAL = Invalid credentials.
NOT_HELLO = Not a hello message.
NOT_RESPONSE = Not a response message.
PS_UNAVAILABLE = The persistent store is unavailable. The exception thrown by the repository is {0}.
PS_CONFIG = The persistent store configuration is incorrect or has not been completed.
QUALIFIER_UNOVERRIDABLE = {0} cannot override qualifier {1} because it has DisableOverride flavor.
VER_ERROR = Unsupported version {0}.
TYPE_ERROR = Cannot convert {3} {4} to a {2} for {0} in class {1}.
CIM_ERR_INVALID_PARAMETER = The parameter {0} is invalid.
CIM_ERR_NOT_FOUND = Element {0} cannot be found.
CIM_ERR_INVALID_CLASS = Class {0} does not exist.
CIM_ERR_ALREADY_EXISTS = Element {0} already exists.
CIM_ERR_INVALID_SUPERCLASS = Superclass {1} for class {0} does not exist.
CIM_ERR_FAILED = Other Exception: {0}
CIM_ERR_ACCESS_DENIED = Insufficient privileges.
CIM_ERR_NOT_SUPPORTED = Unsupported.
NO_SUCH_FILE = File {0} cannot be found.
CANNOT_CREATE_FILE = Cannot create {0} file.
PASSWORD = Enter password:
NOT_EVENT_PROVIDER = Provider {1} for class {0} does not implement EventProvider interface.

# 'mofcomp -j' resources
#
# ***************************************************************************
# LOCALIZATION NOTE: The following resources are part of the mofcomp 
# command line interface output. They should be localized if other mofcomp
# CLI output is localized
# ***************************************************************************
#
ERR_BEAN_ARG_NOT_FOUND = The specified Bean generator configuration file could not be found: {0}
ERR_BEAN_ARG_BAD = The following line in the Bean generator configuration file is invalid: {0}

# 'mofcomp -j' Java Bean source generation resources
#
# ***************************************************************************
# LOCALIZATION NOTE: The resources below are used in the generation of Java 
# Beans from CIM classes. These resources are used in the generated source 
# code's JavaDoc. Since this is a developer tool, whether these resources 
# should be localized is debatable. None of these resources are part of the 
# actual source code itself, so beyond the legal character sets outlined in 
# the Java specification, localizing them will not impact the user's ability 
# to compile the generated Java source.
# NOTE: Many of these resources include Description qualifier string values 
# from CIM classes. If the values of the Description qualifiers are not 
# localized, these resources should not be localized.
# ***************************************************************************
#

# file header for all 'mofcomp -j' generated source code
# {0} = mofcomp's major.minor.revision version
# {1} = generation date/time stamp
#
FILE_HEADER = This file was auto-generated by 'mofcomp -j' version {0} on {1}.

# base 'mofcomp -j' Java Interface resources
#
CIMBEAN_INTERFACE_JAVADOC = This Interface defines the methods that must be implemented by CIMBeanImpl and its subclasses. CIMBeanImpl constitutes the base class of the Java source generated by 'mofcomp -j'.
CIMBEAN_GETCIMOMHANDLE_JAVADOC = This method returns the CIMBean's CIMOMHandle.
CIMBEAN_SETCIMOMHANDLE_JAVADOC = This method sets the CIMBean's CIMOMHandle to the specifed value.
CIMBEAN_GETCIMINSTANCE_JAVADOC = This method returns the CIMBean's CIMInstance.
CIMBEAN_SETCIMINSTANCE_JAVADOC = This method sets the CIMBean's CIMInstance to the specified value.
CIMBEAN_UPDATE_JAVADOC = This method makes the remote call to update the CIMInstance in the CIMOM.
CIMBEAN_UPDATE2_JAVADOC = This method makes the remote call to update the specified CIMProperty of the CIMInstance in the CIMOM.
CIMBEAN_DELETE_JAVADOC = This method makes the remote call to delete the CIMInstance in the CIMOM.
CIMBEAN_GETBEANKEYS_JAVADOC = This method returns a string array of the Key qualified property name(s) in the CIMInstance. This is needed to build the CIMObjectPath for the CIMInstance if it does not contain any qualifier information.
CIMBEAN_GETVERSION_JAVADOC = This method returns the CIM class's Version qualifier value, or '-1' if it does not have this qualifier.
CIMBEAN_TOSTRING_JAVADOC = This method returns a string representation of the CIMBean. This method is intended for debug purposes and the format of the string may vary from implementation to implementation. The string returned may be empty, but may not be null.

# base 'mofcomp -j' Java Bean resources
#
CIMBEANIMPL_CLASS_JAVADOC = This Class implements the CIMBean Interface. It is the base Class of the Java source code generated by 'mofcomp -j'.
CIMBEANIMPL_DEFAULTCONSTRUCTOR_JAVADOC = This default constructor takes no parameters and creates an empty instance of CIMBeanImpl.
CIMBEANIMPL_FULLCONSTRUCTOR_JAVADOC = This constructor takes the specified CIMOMHandle and CIMInstance and creates a CIMBeanImpl.
CIMBEANIMPL_GETOBJPATH_JAVADOC = This method returns the CIMObjectPath of the class's CIMInstance.
CIMBEANIMPL_GETARRAYINDEX_JAVADOC = This convenience method returns the index of the specified object in the specified array, or -1 if the object is not contained in the array.
CIMBEANIMPL_GETPROPERTY_JAVADOC = This is a convenience method for use by subclasses to get the Object contained in the given CIMProperty's CIMValue. NOTE: The Object returned may be null.
CIMBEANIMPL_GETARRAYPROPERTY_JAVADOC = This is a convenience method for use by subclasses to get the String[] equivalent to the Vector contained in the given CIMProperty's CIMValue. NOTE: The String[] returned may be null.
CIMBEANIMPL_GETASSOCIATIONPROPERTY_JAVADOC = This method gets the CIMInstance referenced by the property value (i.e. the object path specified) and sets it in the specified Bean. This method is used by accessor methods of Association properties.
CIMBEANIMPL_SETPROPERTY_JAVADOC = This is a convenience method for use by subclasses to set a CIMValue containing the specified Object value in the CIMProperty of the specified name.
CIMBEANIMPL_SETARRAYPROPERTY_JAVADOC = This is a convenience method for use by subclasses to set a CIMValue containing a Vector equivalent to the specified String[] in the CIMProperty of the specified name.
CIMBEANIMPL_GETOBJECTPATH_JAVADOC = This is a convenience method for use by update(), delete(), and subclasses's invokeMethods. It provides a mechanism for retrieving a CIMObjectPath for the CIMInstance, even when the CIMInstance does not have Qualifier information.

BEAN_CLASS_JAVADOC = This Class contains accessor and mutator methods for all properties defined in the CIM class {0} as well as methods comparable to the invokeMethods defined for this class. This Class implements the {0}Bean Interface. The CIM class {0} is described as follows:
BEAN_INTERFACE_JAVADOC = This Interface contains accessor and mutator methods for all properties defined in CIM class {0} as well as methods comparable to the invokeMethods defined for this class. This Interface is implemented by {0}BeanImpl. The CIM class {0} is described as follows:
BEAN_CONSTRUCTOR_JAVADOC = This constructor creates a {0}BeanImpl Class which implements the {0}Bean Interface, and encapsulates the CIM class {0} in a Java Bean. The CIM class {0} is described as follows:
BEAN_GETKEYS_JAVADOC = This method returns an array of Strings with the names of the key qualified properties defined for the CIM class. This method is used to build the CIMObjectPath of the CIMInstance managed by the Bean in the case that the key qualifiers are not included in the CIMInstance.
BEAN_GETVERSION_JAVADOC = This method returns the Version qualifier value of CIM class {0} or "-1" if the class does not have a Version qualifier.
BEAN_OUTPUTCONSTRUCTOR_JAVADOC = This constructor creates a {0}Output Class. An instance of this class is required as a parameter to invoke the {0}() method.
BEANKEYS_JAVADOC = This Class is a container for values of the Key qualified properties defined for CIM class {0}. An instance of this class is needed to retrieve an instance of {0}Bean. This class is comparable to CIMObjectPath on a per Bean basis.
BEANKEYS_CONSTRUCTOR_JAVADOC = This constructor creates a {0}BeanKeys Class. It encapsulates the key qualified properties defined for CIM class {0}.
BEANKEYS_ACCESSOR_JAVADOC = This method returns the value specified for the {0} key qualified property at class construction.
BEANKEYS_CIMOBJPATH_JAVADOC = This method builds a CIMObjectPath to indentify the CIMInstance being managed by a CIMBean.

BEAN_ACCESSOR_JAVADOC = This method returns the {0}.{1} property value. This property is described as follows:
BEAN_MUTATOR_JAVADOC = This method sets the {0}.{1} property value. This property is described as follows:
BEAN_UNITS_JAVADOC = This method returns the Units associated with the {0}.{1} property value. This property is described as follows:
BEAN_DISPLAYNAME_JAVADOC = This method returns the Display Name associated with the {0}.{1} property. This property is described as follows:
BEAN_INVOKEMETHOD_JAVADOC = This method invokes the {0}.{1}() method. This method is described as follows:

PROP_VALUES_ACCESSOR_JAVADOC = This method returns a String array containing the legal values defined for the {0}.{1} property. This property is described as follows:
PARAM_VALUES_ACCESSOR_JAVADOC = This method returns a String array containing the legal values defined for the {0}.{1}() {2} parameter.
PROP_VALUEMAP_CONSTANTS_JAVADOC = The following constants are defined for use with the ValueMap/Values qualified property {0}.
PARAM_VALUEMAP_CONSTANTS_JAVADOC = The following constants are defined for use with the ValueMap/Values qualified parameter {0} of {1}().

# invokeMethod Output container class 
#
METHODOUTPUT_INTERFACE_JAVADOC = This Interface provides access to the output resulting from invoking the Bean equivalent of the CIM class {0}.{1}() method. An instance of this Interface is required as the last parameter of the method. This invokeMethod is described as follows:
METHODOUTPUT_CLASS_JAVADOC = This Class is a container for the output resulting from invoking the Bean equivalent of the CIM class {0}.{1}() method. An instance of this Class is constructed from the output resulting from an invokation of this method and assigned to the specified Interface handle. This invokeMethod is described as follows:
METHODOUTPUT_CONSTRUCTOR_JAVADOC = This constructor creates a {0} Class. It encapsulates the OUT qualified parameters defined for the CIM class {1}.{2}() method.
METHODOUTPUT_ACCESSOR_JAVADOC = This method returns the output in the {0} parameter resulting from an invokation of the {1}.{2}() method.

# JavaDoc parameter and return value descriptions
#
ACCESSOR_RETURN_DESCRIPTION = current {0} property value
MUTATOR_PARAM_DESCRIPTION = new {0} property value
UNITS_RETURN_DESCRIPTION = {0} property value units
DISPLAYNAME_RETURN_DESCRIPTION = display name for {0} property
INVOKEMETHOD_PARAM_DESCRIPTION = value of {0} parameter
INVOKEMETHOD_RETURN_DESCRIPTION = return value of {0}() invokation
KEY_PARAM_DESCRIPTION = container of key property values
KEYS_RETURN_DESCRIPTION = array of the key qualified property names
VERSION_RETURN_DESCRIPTION = Version qualifier value or "-1" if there isn't one
INSTANCE_PARAM_DESCRIPTION = handle to the CIMInstance being managed
CIMOM_PARAM_DESCRIPTION = handle to the CIMOM
CIMOBJPATH_RETURN_DESCRIPTION = the object path of a CIMInstance
VALUESACCESSOR_RETURN_DESCRIPTION = array of legal values
UPDATE_STRINGPARAM_DESCRIPTION = property name to update in the CIMInstance
UPDATE_OBJECTPARAM_DESCRIPTION = property value to update in the CIMProperty
TOSTRING_RETURN_DESCRIPTION = string representation of the Bean
GETPROPERTY_PARAM_DESCRIPTION = property name whose value should be retrieved
GETPROPERTY_RETURN_DESCRIPTION = object contained in the CIMProperty's CIMValue

# Common to CIMBeanImpl getArrayProperty() and setArrayProperty()
#
ARRAYPROPERTY_STRPARAM_DESCRIPTION = property name to get the value for
ARRAYPROPERTY_STRARRPARAM_DESCRIPTION = property Values qualifier data
ARRAYPROPERTY_OBJARRPARAM_DESCRIPTION = property ValueMap qualifier data

GETARRAYPROPERTY_RETURN_DESCRIPTION = container of constants for property value
SETARRAYPROPERTY_STRARR_DESCRIPTION = property value to set in the CIMInstance

SETPROPERTY_STRINGPARAM_DESCRIPTION = property name to set a new value for
SETPROPERTY_OBJECTPARAM_DESCRIPTION = property value to update in the CIMInstance
GETASSOCPROPERTY_BEANPARAM_DESCRIPTION = Bean container for CIMInstance retrieved
GETOBJECTPATH_RETURN_DESCRIPTION = object path for the CIMInstance
CIMEXCEPTION_DESCRIPTION = thrown when an property doesn't exist
GETARRINDEX_ARRAY_DESCRIPTION = Object array to find index of Object in
GETARRINDEX_OBJ_DESCRIPTION = Object to find index of in Object array
GETARRINDEX_RETURN_DESCRIPTION = index of Object in Object array
