/*
 *EXHIBIT A - Sun Industry Standards Source License
 *
 *"The contents of this file are subject to the Sun Industry
 *Standards Source License Version 1.2 (the "License");
 *You may not use this file except in compliance with the
 *License. You may obtain a copy of the
 *License at http://wbemservices.sourceforge.net/license.html
 *
 *Software distributed under the License is distributed on
 *an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
 *express or implied. See the License for the specific
 *language governing rights and limitations under the License.
 *
 *The Original Code is WBEM Services.
 *
 *The Initial Developer of the Original Code is:
 *AppIQ, Inc.
 *
 * Copyright (C) 2002, 2003 AppIQ Inc
 *
 *Portions created by: Sun Microsystems, Inc.
 *are Copyright Â© 2001 Sun Microsystems, Inc.
 *
 *All Rights Reserved.
 * 
 * 
 *
 *Contributor(s): _______________________________________
*/

package org.wbemservices.wbem.repository;

import javax.wbem.cim.*;
import java.util.Enumeration;
import java.util.Vector;

public class InstanceNameUtils
{

    /**
     * Get a key for a cim element for use in the repository.
     * Generally ok to use element.getName, but for CIMInstance,
     * we have to use the safe version from getInstanceNameKey
     * @param element
     * @return
     */
    public static String getNameForElement(CIMElement element) {
        if (element instanceof CIMInstance)
            return getInstanceNameKey((CIMInstance) element);

        return element.getName();
    }

    /**
     * Get a key for an instance for use in the repository.
     * <PJA> This key must be restricted to information that
     * comes through a protocol adapter in a getInstance request, so the conventional instance.getName is
     * not good enough, as it contains class origin info for keys of referenced objects in associations.
     * The key generated here is the same as an instance name but with no class origin info.
     * @param ci CIMInstance for which key is required
     * @return key generated by appending key=value pairs to instance class name
     */
    static String getInstanceNameKey(CIMInstance ci)
    {
        String name = ci.getClassName().toLowerCase();

        for (Enumeration e = ci.getProperties().elements(); e.hasMoreElements();)
        {
            CIMProperty pe = (CIMProperty) e.nextElement();

            // We only want to consider keys that have not been overridden
            if ((pe.isKey()) && (pe.getOverridingProperty() == null))
            {
                CIMValue cv = pe.getValue();
                if (cv == null) // though keys may NOT be null
                {
                    name = name.concat(":" + pe.getName().toLowerCase() + "=null");
                }
                else
                {
                    name = name.concat(":" + pe.getName().toLowerCase() + "=" + toString(cv));
                }
            }
        }
        return name;
    }

    private static String toString(CIMValue cv)
    {
        String s = "null";
        Object o = cv.getValue();
        if (o != null)
        {
            // Arrays cannot be keys.
            if (cv.isArrayValue())
            {
                throw new IllegalArgumentException(o.toString());
            }
            else
            {
                String q = "";
                if ((new CIMDataType(CIMDataType.STRING)).equals(
                        cv.getType()))
                {
                    q = "\"";
                }
                s = q + values(o) + q;
            }
        }
        return s;
    }

    private static String values(Object o)
    {
        if (o instanceof CIMObjectPath)
        {
            return toString((CIMObjectPath) o);
        }
        else if (o instanceof CIMDateTime)
        {
            return toString((CIMDateTime) o);
        }
        else if (o instanceof CIMInstance)
        {
            // Will not allow instances as keys
            throw new IllegalArgumentException(o.toString());
        }
        // The rest are numbers or strings, and its fine to invoke their
        // toString methods
        return o.toString();
    }

    private static String toString(CIMDateTime cdt)
    {
        return cdt.toString();
    }

    private static String toString(CIMObjectPath op)
    {
        Vector keys = op.getKeys();
        String nameSpace = op.getNameSpace();
        String objectName = op.getObjectName();
        if ((keys == null) || (keys.size() == 0))
        {
            if (objectName != null && objectName.length() != 0)
            {
                return nameSpace + '/' + objectName;
            }
            else
            {
                return nameSpace;
            }
        }
        else
        {
            String s = "";
            int i = 0;
            for (Enumeration e = keys.elements(); e.hasMoreElements();)
            {
                CIMProperty pe = (CIMProperty) e.nextElement();
                if (pe != null)
                {
                    s = s + pe.getName().toLowerCase() + "=" + toString(pe.getValue()) + ":";
                    i++;
                }
            }
            if (i > 0)
            {
                return nameSpace + '/' + objectName + ":" +
                        s.substring(0, s.lastIndexOf(":"));
            }
            else
            {
                return nameSpace + '/' + objectName;
            }
        }
    }
}
