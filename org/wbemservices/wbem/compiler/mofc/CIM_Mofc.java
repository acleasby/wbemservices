/* Generated By:JavaCC: Do not edit this line. CIM_Mofc.java */
package org.wbemservices.wbem.compiler.mofc;

import org.wbemservices.wbem.compiler.prep.CIM_Prep;

import javax.wbem.cim.*;
import javax.wbem.client.CIMOMHandle;
import javax.wbem.client.Debug;
import java.io.*;
import java.math.BigInteger;
import java.text.MessageFormat;
import java.util.*;

public class CIM_Mofc implements CIM_MofcConstants {

    private static final int MINMODE = 0;
    public static final int NORMALMODE = 0;
    public static final int REGMODE = 1;
    public static final int UNREGMODE = 2;
    private static final int MAXMODE = 2;
    private static final String EXRESOURCE =
            "org.wbemservices.wbem.compiler.mofc.Compiler";

    private MofcBackend comp = null;
    private int parsePhase = 1;
    private boolean verbose = false;
    private boolean onlySynCheck = false;
    private Locale locale = Locale.getDefault();
    private static final String NO_SUCH_FILE = "NO_SUCH_FILE";
    XmlWriter xmlwriter = new XmlWriter();
    boolean isInvoked = false;
    int mode = NORMALMODE;
    CIMOMHandle callBack = null;

    public boolean isVerbose() {
        return verbose;
    }

    // This method can be used by any class which wishes to embed a
    // MOF parser. The parser calls back on the CIMOMHandle when it wants
    // to do its CIM create/set operations. It only invokes a subset of the
    // operations, but we're not creating a new interface for now.
    // @param argv[] - args as passed to mofcomp
    // @param callBack The handle the mof parser invokes when it wants to
    // create/set/delete/get CIM elements
    // @param mode The mode in which this parser runs.
    // NORMALMODE - parses normal MOF files
    // REGMODE - allows files to have #pragma namespace directives to ask
    // the parser to do sets instead of creates and vice versa.
    // UNREGMODE - allows files to set delete modes on the fly in addition to
    // to sets and creates.
    public static void parseMOF(String[] argv, int mode, CIMOMHandle callBack)
            throws Exception {
        parseMOF(argv, true, mode, callBack);
    }

    // This method can be used by any class which wishes to embed a
    // MOF parser. The parser calls back on the CIMOMHandle when it wants
    // to do its CIM create/set operations. It only invokes a subset of the
    // operations, but we're not creating a new interface for now.
    // @param argv[] - args as passed to mofcomp
    // @param isInvoked - this parameter if true, tells the parser to not exit, 
    // but return on success and throw exceptions on failure.
    // @param callBack The handle the mof parser invokes when it wants to
    // create/set/delete/get CIM elements
    // @param mode The mode in which this parser runs.
    // NORMALMODE - parses normal MOF files
    // REGMODE - allows files to have #pragma namespace directives to ask
    // the parser to do sets instead of creates and vice versa.
    // UNREGMODE - allows files to set delete modes on the fly in addition to
    // to sets and creates.
    static void parseMOF(String[] argv, boolean isInvoked,
            int mode, CIMOMHandle callBack) throws Exception {
        CIM_Mofc parser = null;
        CIM_Prep preProc;
        String fileName = null;

        //set I18N Bundle and log name. All instances of the parser will
        // share these, so they could get overwritten by new instances of
        // the parser.
        I18N.setResourceName("org.wbemservices.wbem.compiler.mofc.Compiler");
        LogFile.setFileName("mofcomp.log");

        //Check Command Line information (before logging)
        Hashtable clht = CIM_Mofc.checkCommandLine(argv, isInvoked);
        fileName = (String) clht.get("filename");
        fileName = new File(fileName).getAbsolutePath();
        if (fileName == null) {
            System.err.println(I18N.loadString("NO_FILE"));
            if (!isInvoked) {
                System.exit(1);
            } else {
                throw new
                        CIMException(CIMException.CIM_ERR_NOT_FOUND, fileName);
            }
        }

        FileInputStream fis = null;
        try {
            boolean idempotent = clht.get("-idempotent") != null;
            fis = new FileInputStream(fileName);
            preProc = new CIM_Prep(fis, fileName);
            preProc.pre_FileName = fileName;
            preProc.FileNameTable.put(fileName, fileName);
            preProc.dos.writeBytes("##FILE \"" + fileName + "\"\n");
            preProc.cw.write("##FILE \"" + fileName + "\"\n");
            try {
                preProc.ExpressionList(new File(fileName).getParent(), idempotent);
            } catch (IOException ioe) {
                if (!isInvoked) {
                    ioe.printStackTrace();
                    System.exit(-1);
                } else {
                    throw new IOException(ioe.toString());
                }
            }

            if (preProc.isASCII()) {
                parser = new CIM_Mofc(new InputStreamReader(
                        new ByteArrayInputStream(preProc.bos.toByteArray()), "UTF-8"));
            } else {
                parser = new CIM_Mofc(new BufferedReader(new CharArrayReader(
                        preProc.cw.toCharArray())));
            }
            /*
            parser =
            new CIM_Mofc(new ByteArrayInputStream(preProc.bos.toByteArray()));
            */

            // initialize all the parser settings
            if (clht.get("-s") != null) {
                parser.onlySynCheck = true;
            }
            if (clht.get("-v") != null) {
                parser.verbose = true;
            }

            parser.mode = mode;
            parser.isInvoked = isInvoked;
            parser.callBack = callBack;
            parser.comp = new MofcBackend(clht, parser);

            parser.mofSpecification();

            if (parser.onlySynCheck) {
                if (!isInvoked) {
                    System.out.println(I18N.loadString("SYN_SUCCESS"));
                    System.exit(0);
                } else {
                    return;
                }
            }

            if (preProc.isASCII()) {
                parser.ReInit(new InputStreamReader(
                        new ByteArrayInputStream(preProc.bos.toByteArray()), "UTF-8"));
            } else {
                parser.ReInit(new BufferedReader(new CharArrayReader(
                        preProc.cw.toCharArray())));
            }
            parser.parsePhase = 2;
            parser.comp.setParsePhase(2);
            //If the user set the namespace on the commandline - use it
            if (clht.get("-n") != null) {
                parser.comp.switchNamespace((String) clht.get("namespace"));
            }

            int i = -1;
            while (i + 1 < argv.length) {
                i++;
                if (argv[i].equalsIgnoreCase("-b")) {
                    parser.comp.setFile(parser.xmlwriter.openXmlFile());
                    parser.comp.setBigFile(parser.xmlwriter.openBigXmlFile());
                }
            }
            parser.mofSpecification();
            i = -1;
            while (i + 1 < argv.length) {
                i++;
                if (argv[i].equalsIgnoreCase("-b")) {
                    parser.xmlwriter.writeEndTags(parser.xmlwriter.getFile());
                    parser.xmlwriter.writeBigEndTags(parser.xmlwriter.getBigFile());
                }
            }
            System.out.println(I18N.loadString("SUCCESS"));
        } catch (FileNotFoundException fne) {
            if (!isInvoked) {
                System.err.println("ERROR: Can not find file: " + fileName);
                System.exit(1);
            } else {
                throw fne;
            }
        } catch (Exception e) {

            if ((parser != null) && (parser.comp != null)) {
                parser.comp.cleanup();
            }

            if (isInvoked) {
                throw e;
            }

            if (e instanceof CIMException) {
                System.err.println(
                        parser.toStringCIMException((CIMException) e));
            } else {
                System.err.println(e);
            }

            System.exit(1);
        } finally {
            // Clean up the input stream.
            if (fis != null) {
                fis.close();
            }
        }

        if ((parser.comp != null)) {
            parser.comp.cleanup();
        }

        if (!isInvoked) {
            System.exit(0);
        }
    }

    public static void main(String argv[]) throws Exception {
        parseMOF(argv, false, NORMALMODE, null);
        Debug.traceOpen("3tmp", "stderr");
    }

    String toStringCIMException(CIMException cimEx) {

        ResourceBundle bundle = null;
        String msgString = null;
        try {
            bundle = ResourceBundle.getBundle(EXRESOURCE, locale);
        } catch (MissingResourceException e) {
            try {
                bundle = ResourceBundle.getBundle(EXRESOURCE, Locale.ENGLISH);
            } catch (MissingResourceException ee) {
                System.err.println("CRITICAL ERROR: Could not load resource bundle " + EXRESOURCE);
            }
        }

        String ID = "";
        if (bundle == null) {
            //Since this is an error msg about not being able to locate
            //the resource bundle - Do not localize these strings
            System.err.println("CRITICAL ERROR: Could not load resource bundle " + EXRESOURCE);
            return null;
        } else {
            ID = cimEx.getID();
            try {
                msgString = bundle.getString(ID);
            } catch (MissingResourceException e) {
                //Since this is an error msg about not being able to locate
                //the resource bundle - Do not localize these strings
                System.err.println("WARNING: Could not load ID " +
                        ID + " resource bundle " + EXRESOURCE);
                return ID;
            }
        }

        if (msgString != null) {
            return (ID + ":" + MessageFormat.format(msgString, cimEx.getParams()));
        } else {
            return null;
        }
    }

    public int getCurrentLine() {
        int a = jj_input_stream.getEndLine();
        return (a - comp.lineNo);
    }

    private char parseCharacter(String s) {
        String t = s.substring(1, s.length() - 1);
        if (t.charAt(0) == '\\') {
            switch (t.charAt(1)) {
            case 'n':
                return ('\n');
            case 't':
                return ('\t');
            case 'b':
                return ('\b');
            case 'r':
                return ('\r');
            case 'f':
                return ('\f');
            case '\\':
                return ('\\');
            case '\'':
                return ('\'');
            case '"':
                return ('"');
            default:
                throw new IllegalArgumentException(s);
            }
        } else {
            return (t.charAt(0));
        }
    }

    private String parseString(String s) {
        String t = s.substring(1, s.length() - 1);
        int i = t.length();
        StringBuffer b = new StringBuffer();
        for (int j = 0; j < i; j++) {
            if (t.charAt(j) == '\\') {
                j++;
                switch (t.charAt(j)) {
                case 'n':
                    b.append('\n');
                    break;
                case 't':
                    b.append('\t');
                    break;
                case 'b':
                    b.append('\b');
                    break;
                case 'r':
                    b.append('\r');
                    break;
                case 'f':
                    b.append('\f');
                    break;
                case '\\':
                    b.append('\\');
                    break;
                case '\'':
                    b.append('\'');
                    break;
                case '"':
                    b.append('"');
                    break;
                default:
                    throw new IllegalArgumentException(s);
                }
            } else {
                b.append(t.charAt(j));
            }
        }
        return b.toString();
    }

    private static Hashtable checkCommandLine(String argv[],
            boolean isInvoked) throws CIMException {
        Hashtable ht = new Hashtable();
        int igsize = 0;
        if ((argv.length == 0)) {
            if (!isInvoked) {
                System.out.println(I18N.loadString("MOFC_COMMAND_LINE_ARGS"));
                System.exit(0);
            } else {
                throw new CIMException(CIMException.CIM_ERR_INVALID_PARAMETER,
                        argv);
            }
        }
        int i = -1;
        while (i + 1 < argv.length) {
            i++;
            if (argv[i].equals("-v")) {
                LogFile.setVerbose(true);
                ht.put("-v", "-v");
                continue;
            }
            //NOTE: I did not make the second char on this 
            //      argument programatic on purpose - There are 
            //      going to be some changes to the logging class!
            if (argv[i].equalsIgnoreCase("-l0")) {
                LogFile.setLevel(LogFile.CRITICAL);
                LogFile.start();
                continue;
            }
            if (argv[i].equals("-l1")) {
                LogFile.setLevel(LogFile.WARNING);
                LogFile.start();
                continue;
            }
            if (argv[i].equals("-l2")) {
                LogFile.setLevel(LogFile.INFORMATIONAL);
                LogFile.start();
                continue;
            }
            if (argv[i].equals("-l3")) {
                LogFile.setLevel(LogFile.DEBUG);
                LogFile.start();
                continue;
            }
            //This is an unpublished parameter
            if (argv[i].equals("-lDev")) {
                LogFile.setLevel(LogFile.DEVELOPMENT);
                LogFile.start();
                continue;
            }

            if (argv[i].equals("-C")) {
                // overwrite existing classes.
                ht.put("-C", "-C");
                continue;
            }

            if (argv[i].equalsIgnoreCase("-I")) {
                // overwrite existing instances.
                ht.put("-I", "-I");
                continue;
            }

            if (argv[i].equals("-Q")) {
                // overwrite existing qualifiers.
                ht.put("-Q", "-Q");
                continue;
            }
            if (argv[i].equals("-s")) {
                // do only syntactic checking
                ht.put("-s", "-s");
                continue;
            }

            //Namespace support
            if (argv[i].equals("-n")) {
                i++;
                ht.put("-n", "-n");
                if (i >= argv.length) {
                    System.err.println(
                            I18N.loadString("MOFC_COMMAND_LINE_ARGS"));
                    System.exit(1);
                }
                ht.put("namespace", argv[i]);
                continue;
            }

            // <PJA> 25-march-2003
            if (argv[i].equals("-clean")) // delete namespace
            {
                ht.put("-clean", "-clean");
                continue;
            }

            //MOF2BEAN support
            if (argv[i].equalsIgnoreCase("-j")) {
                i++;
                ht.put("-j", "-j");
                if (i >= argv.length) {
                    System.err.println(
                            I18N.loadString("MOFC_COMMAND_LINE_ARGS"));
                    System.exit(1);
                }
                try {
                    // verify that the specified file exists
                    FileReader beanArg = new FileReader(argv[i]);

                    // get the PACKAGE, IMPORTS, and EXCEPTIONS values
                    // from the Bean config file
                    BeanArgReader beanArgReader = new BeanArgReader(beanArg);
                    ht.put("beanPackage", beanArgReader.getPackage());
                    ht.put("beanImports", beanArgReader.getImports());
                    ht.put("beanExceptions", beanArgReader.getExceptions());
                } catch (FileNotFoundException fnfe) {
                    Vector vError = new Vector(1);
                    vError.addElement(argv[i]);
                    System.err.println(I18N.loadStringFormat(
                            "ERR_BEAN_ARG_NOT_FOUND", vError));
                    System.exit(1);
                }
                continue;
            }

            if (argv[i].equalsIgnoreCase("-x")) {
                ht.put("-x", "-x");
                continue;
            }
            if (argv[i].equalsIgnoreCase("-b")) {
                // internal build option generates bigmof.xml file
                ht.put("-b", "-b");
                continue;
            }
            if (argv[i].equals("-version")) {
                if (!isInvoked) {
                    System.out.println(Version.productName + " " +
                            Version.major + "." + Version.minor + "." +
                            Version.revision + " " + Version.buildID);
                    System.exit(0);
                } else {
                    // cant ask for version if invoked
                    throw new CIMException(
                            CIMException.CIM_ERR_INVALID_PARAMETER, "version");
                }
            }
            if (argv[i].equals("-h")) {
                if (!isInvoked) {
                    System.out.println(
                            I18N.loadString("MOFC_COMMAND_LINE_ARGS"));
                    System.exit(0);
                } else {
                    // cant ask for help if invoked
                    throw new CIMException(
                            CIMException.CIM_ERR_INVALID_PARAMETER, "h");
                }
            }
            if (argv[i].equals("-c")) {
                if (isInvoked) {
                    // cant specify a remote CIM server if invoked, 
                    // the callBack should take care of that
                    throw new CIMException(
                            CIMException.CIM_ERR_INVALID_PARAMETER, "-c");
                }
                i++;
                if (i >= argv.length) {
                    System.err.println(
                            I18N.loadString("MOFC_COMMAND_LINE_ARGS"));
                    System.exit(1);
                }
                ht.put("cimhost", argv[i]);
                continue;
            }

            if (argv[i].equals("-u")) {
                if (isInvoked) {
                    // cant specify a user if invoked, 
                    // the callBack should take care of that
                    throw new CIMException(
                            CIMException.CIM_ERR_INVALID_PARAMETER, "-u");
                }
                i++;
                if (i >= argv.length) {
                    System.err.println(I18N.loadString("MOFC_COMMAND_LINE_ARGS"));
                    System.exit(1);
                }
                ht.put("username", argv[i]);
                continue;
            }
            if (argv[i].equals("-p")) {
                if (isInvoked) {
                    // cant specify a password if invoked, 
                    // the callBack should take care of that
                    throw new CIMException(
                            CIMException.CIM_ERR_INVALID_PARAMETER, "-p");
                }
                i++;
                if (i >= argv.length) {
                    System.err.println(I18N.loadString("MOFC_COMMAND_LINE_ARGS"));
                    System.exit(1);
                }
                ht.put("password", argv[i]);
                continue;
            }
            if (argv[i].equals("-o")) {
                i++;
                if (i >= argv.length) {
                    if (!isInvoked) {
                        System.err.println(
                                I18N.loadString("MOFC_COMMAND_LINE_ARGS"));
                        System.exit(1);
                    } else {
                        throw new CIMException(
                                CIMException.CIM_ERR_INVALID_PARAMETER, "-o");
                    }
                }
                ht.put("logdir", argv[i]);
                ht.put("standalone", "true");
                continue;
            }

            ht.put("filename", argv[i]);
            // increment the ignored parameter
            igsize++;
        }
        if (igsize > 1) {
            if (!isInvoked) {
                System.err.println(I18N.loadString("MOFC_COMMAND_LINE_ARGS"));
                System.exit(1);
            } else {
                throw new CIMException(
                        CIMException.CIM_ERR_INVALID_PARAMETER, argv);
            }
        }
        return ht;
    }

    /*
// ------------------------------------------------------------------------
// MOF Specification: This production parses the specification. Each of
// the subproductions populate the appropriate element associated with it
// in an instance (comp) of MofcompBackend. For e.g. if the subproduction
// is for className, then it populates comp.curClassEl's name. Finally
// when the entire class has been parsed successfully, the class can be
// added using the information accumulated in curClassEl.
// ------------------------------------------------------------------------
*/
    final public void mofSpecification() throws ParseException, CIMException {
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case PRECOMP_LINE:
            case PRECOMP_FILE:
            case PRAGMA:
            case CLASS:
            case INSTANCE:
            case QUALIFIER:
            case OPEN_SQU_BRA:
                mofProductions();
                break;
            default:
                jj_la1[0] = jj_gen;
                ;
            }
            jj_consume_token(0);
        } catch (ParseException e) {
            LogFile.add(LogFile.CRITICAL, "ERR_PARSE", new Object[] {
                    comp.fileName,
                    new Integer(getCurrentLine())
            });
            System.err.println(
                    I18N.loadStringFormat("ERROR_LINE", comp.fileName,
                            new Integer(getCurrentLine())));
            {
                if (true) {
                    throw e;
                }
            }
        }
    }

    final public void mofProductions() throws ParseException, CIMException {
        label_1:
        while (true) {
            mofProduction();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case PRECOMP_LINE:
            case PRECOMP_FILE:
            case PRAGMA:
            case CLASS:
            case INSTANCE:
            case QUALIFIER:
            case OPEN_SQU_BRA:
                ;
                break;
            default:
                jj_la1[1] = jj_gen;
                break label_1;
            }
        }
    }

    final public void mofProduction() throws ParseException, CIMException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case PRAGMA:
            compilerDirective();
            break;
        case PRECOMP_LINE:
        case PRECOMP_FILE:
            precompilerDirective();
            break;
        case CLASS:
        case INSTANCE:
        case OPEN_SQU_BRA:
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case OPEN_SQU_BRA:
                qualifierList();
                break;
            default:
                jj_la1[2] = jj_gen;
                ;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case CLASS:
                classDeclaration();
                break;
            case INSTANCE:
                instanceDeclaration();
                break;
            default:
                jj_la1[3] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            break;
        case QUALIFIER:
            qualifierTypeDeclaration();
            break;
        default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    /*
// ------------------------------------------------------------------------
// PreCompiler Directive
// ------------------------------------------------------------------------
*/
    final public void precompilerDirective() throws ParseException {
        Token t;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case PRECOMP_LINE:
            jj_consume_token(PRECOMP_LINE);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case POS_DECIMAL_VALUE:
                t = jj_consume_token(POS_DECIMAL_VALUE);
                break;
            case ZERO:
                t = jj_consume_token(ZERO);
                break;
            default:
                jj_la1[5] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            comp.lineNo = t.endLine - Integer.parseInt(t.image);
            break;
        case PRECOMP_FILE:
            jj_consume_token(PRECOMP_FILE);
            t = jj_consume_token(STRING_VALUE);
            //Removed the parse from this line
            comp.fileName = t.image;
            comp.lineNo = t.endLine;
            break;
        default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    /*
// ------------------------------------------------------------------------
// CompilerDirectives
// ------------------------------------------------------------------------
*/
    final public void compilerDirective() throws ParseException, CIMException {
        jj_consume_token(PRAGMA);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case NAMESPACE:
            namespacePragma();
            break;
        case SOURCE:
            sourcePragma();
            break;
        case LOCALE:
            localePragma();
            break;
        case NONLOCALE:
            nonlocalePragma();
            break;
        case INSTANCELOCALE:
            instancelocalePragma();
            break;
        default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void namespacePragma() throws ParseException, CIMException {
        Token t;
        jj_consume_token(NAMESPACE);
        jj_consume_token(OPEN_BRA);
        // CHANGED
        t = jj_consume_token(STRING_VALUE);
        jj_consume_token(CLOSE_BRA);
        comp.switchNamespace(parseString(t.image));
    }

    final public void sourcePragma() throws ParseException {
        jj_consume_token(SOURCE);
        jj_consume_token(OPEN_BRA);
        multiStringValue();
        jj_consume_token(CLOSE_BRA);
    }

    final public void localePragma() throws ParseException {
        jj_consume_token(LOCALE);
        jj_consume_token(OPEN_BRA);
        multiStringValue();
        jj_consume_token(CLOSE_BRA);
    }

    final public void nonlocalePragma() throws ParseException {
        jj_consume_token(NONLOCALE);
        jj_consume_token(OPEN_BRA);
        multiStringValue();
        jj_consume_token(CLOSE_BRA);
    }

    final public void instancelocalePragma() throws ParseException {
        jj_consume_token(INSTANCELOCALE);
        jj_consume_token(OPEN_BRA);
        multiStringValue();
        jj_consume_token(CLOSE_BRA);
    }

    final public String nameToken() throws ParseException {
        Token t;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case IDENTIFIER:
            t = jj_consume_token(IDENTIFIER);
            break;
        case SCHEMA:
            t = jj_consume_token(SCHEMA);
            break;
        case ASSOCIATION:
            t = jj_consume_token(ASSOCIATION);
            break;
        case INDICATION:
            t = jj_consume_token(INDICATION);
            break;
        case REFERENCE:
            t = jj_consume_token(REFERENCE);
            break;
        case LOCALE:
            t = jj_consume_token(LOCALE);
            break;
        case SOURCE:
            t = jj_consume_token(SOURCE);
            break;
        default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if (true) {
                return t.image;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /*
// ------------------------------------------------------------------------
// Qualifier Type Declaration
// (set qualifierTypes)
// (Unit)
// ------------------------------------------------------------------------
*/
    final public void qualifierTypeDeclaration() throws ParseException, CIMException {
        qualifierTypeHead();
        qualifierTypeBody();
        qualifierTypeTail();
    }

    final public void qualifierTypeHead() throws ParseException {
        jj_consume_token(QUALIFIER);
        comp.curLevel = "QUALIFIER";
    }

    final public void qualifierTypeBody() throws ParseException, CIMException {
        qualifierTypeName();
        qualifierTypeDataType();
        qualifierTypeArray_Init();
        qualifierTypeScope();
        qualifierTypeFlavor();
    }

    final public void qualifierTypeTail() throws ParseException, CIMException {
        jj_consume_token(SEMICOLON);
        comp.addQualifierType();
        //comp.curLevel="";
        comp.erroneousUnit = false;
        comp.erroneousPart = false;
    }

    final public void qualifierTypeName() throws ParseException {
        String s;
        s = nameToken();
        comp.curQualifierTypeEl.setName(s);
    }

    final public void qualifierTypeDataType() throws ParseException {
        jj_consume_token(COLON);
        dataType();
    }

    final public void qualifierTypeArray_Init() throws ParseException, CIMException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case OPEN_SQU_BRA:
            qualifierTypeArray_ArrayInit();
            break;
        default:
            jj_la1[9] = jj_gen;
            qualifierTypeSimpleInit();
        }
    }

    final public void qualifierTypeArray_ArrayInit() throws ParseException, CIMException {
        array();
        int simpleType = comp.curType.getType();
        // Create a new array data type.
        comp.curType = new CIMDataType(CIMDataType.findArrayType(simpleType),
                comp.size);
        comp.curQualifierTypeEl.setType(comp.curType);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case EQUAL:
            jj_consume_token(EQUAL);
            arrayInitializer();
            if (!comp.erroneousPart) {
                if (!comp.curValues.isEmpty()) {
                    CIMValue cv = new CIMValue(comp.curValues.vVector);
                    comp.curQualifierTypeEl.setDefaultValue(cv);
                }
            }
            comp.curValues = new MofcCIMValue();
            break;
        default:
            jj_la1[10] = jj_gen;
            ;
        }
    }

    final public void qualifierTypeSimpleInit() throws ParseException, CIMException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case EQUAL:
            jj_consume_token(EQUAL);
            simpleInitializer();
            comp.curQualifierTypeEl.setType(comp.curType);
            // simpleInitializer populated comp.curValues
            if (!comp.erroneousPart) {
                if (!comp.curValues.isEmpty()) {
                    Object o = comp.curValues.vVector.firstElement();
                    comp.curQualifierTypeEl.setDefaultValue(new CIMValue(o));
                }
            }
            comp.curValues = new MofcCIMValue();
            break;
        default:
            jj_la1[11] = jj_gen;
            comp.curQualifierTypeEl.setType(comp.curType);
        }
    }

    final public void qualifierTypeScope() throws ParseException {
        jj_consume_token(COMMA);
        jj_consume_token(SCOPE);
        jj_consume_token(OPEN_BRA);
        ScopeMetaElementList();
        jj_consume_token(CLOSE_BRA);
    }

    final public void ScopeMetaElementList() throws ParseException {
        CIMScope s;
        s = ScopeMetaElement();
        comp.assignQualifierTypeScope(s);
        label_2:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case COMMA:
                ;
                break;
            default:
                jj_la1[12] = jj_gen;
                break label_2;
            }
            jj_consume_token(COMMA);
            s = ScopeMetaElement();
            comp.assignQualifierTypeScope(s);
        }
    }

    final public CIMScope ScopeMetaElement() throws ParseException {
        Token t;
        int scope;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case SCHEMA:
            t = jj_consume_token(SCHEMA);
            scope = CIMScope.SCHEMA;
            break;
        case CLASS:
            t = jj_consume_token(CLASS);
            scope = CIMScope.CLASS;
            break;
        case ASSOCIATION:
            t = jj_consume_token(ASSOCIATION);
            scope = CIMScope.ASSOCIATION;
            break;
        case INDICATION:
            t = jj_consume_token(INDICATION);
            scope = CIMScope.INDICATION;
            break;
        case PROPERTY:
            t = jj_consume_token(PROPERTY);
            scope = CIMScope.PROPERTY;
            break;
        case REFERENCE:
            t = jj_consume_token(REFERENCE);
            scope = CIMScope.REFERENCE;
            break;
        case METHOD:
            t = jj_consume_token(METHOD);
            scope = CIMScope.METHOD;
            break;
        case PARAMETER:
            t = jj_consume_token(PARAMETER);
            scope = CIMScope.PARAMETER;
            break;
        case ANY:
            t = jj_consume_token(ANY);
            scope = CIMScope.ANY;
            break;
        default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if (true) {
                return new CIMScope(scope);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void qualifierTypeFlavor() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case COMMA:
            jj_consume_token(COMMA);
            jj_consume_token(FLAVOR);
            jj_consume_token(OPEN_BRA);
            qualifierTypeFlavorList();
            jj_consume_token(CLOSE_BRA);

            break;
        default:
            jj_la1[14] = jj_gen;

        }
    }

    final public void qualifierTypeFlavorList() throws ParseException {
        CIMFlavor s;
        s = flavor();
        comp.assignQualifierTypeFlavor(s);
        label_3:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case COMMA:
                ;
                break;
            default:
                jj_la1[15] = jj_gen;
                break label_3;
            }
            jj_consume_token(COMMA);
            s = flavor();
            comp.assignQualifierTypeFlavor(s);
        }
    }

    final public CIMFlavor flavor() throws ParseException {
        int flavor;
        Token t;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case ENABLEOVERRIDE:
            t = jj_consume_token(ENABLEOVERRIDE);
            flavor = CIMFlavor.ENABLEOVERRIDE;
            break;
        case DISABLEOVERRIDE:
            t = jj_consume_token(DISABLEOVERRIDE);
            flavor = CIMFlavor.DISABLEOVERRIDE;
            break;
        case RESTRICTED:
            t = jj_consume_token(RESTRICTED);
            flavor = CIMFlavor.RESTRICTED;
            break;
        case TOSUBCLASS:
            t = jj_consume_token(TOSUBCLASS);
            flavor = CIMFlavor.TOSUBCLASS;
            break;
        case TRANSLATABLE:
            t = jj_consume_token(TRANSLATABLE);
            flavor = CIMFlavor.TRANSLATE;
            break;
        default:
            jj_la1[16] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if (true) {
                return new CIMFlavor(flavor);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /*
// ------------------------------------------------------------------------
// Qualifier List
// (set comp.qualifiers)
// (Part)
// ------------------------------------------------------------------------
*/
    final public void qualifierList() throws ParseException, CIMException {
        qualifierListHead();
        qualifierListBody();
        qualifierListTail();
    }

    final public void qualifierListHead() throws ParseException {
        jj_consume_token(OPEN_SQU_BRA);
        comp.curLevel = "QUALIFIERLIST";
        comp.erroneousQualifierList = false;
        comp.qualifiers = new Vector();
    }

    final public void qualifierListBody() throws ParseException, CIMException {
        qualifier();
        comp.addQualifier();
        label_4:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case COMMA:
                ;
                break;
            default:
                jj_la1[17] = jj_gen;
                break label_4;
            }
            jj_consume_token(COMMA);
            qualifier();
            comp.addQualifier();
        }
    }

    final public void qualifierListTail() throws ParseException, CIMException {
        jj_consume_token(CLOSE_SQU_BRA);
        comp.checkQualifierList();
        //comp.curLevel="";

    }

    final public void qualifier() throws ParseException, CIMException {
        qualifierName();
        qualifierParameter();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case COLON:
            qualifierFlavor();
            break;
        default:
            jj_la1[18] = jj_gen;
            ;
        }
    }

    final public void qualifierName() throws ParseException {
        String s;
        s = nameToken();
        comp.assignQualifierNameType(s);
    }

    final public void qualifierParameter() throws ParseException, CIMException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case OPEN_BRA:
            jj_consume_token(OPEN_BRA);
            simpleInitializer();
            jj_consume_token(CLOSE_BRA);
            comp.assignQualifierParameter(false);
            break;
        case OPEN_CUR_BRA:
            arrayInitializer();
            //comp.checkArraySize(comp.curQualifierEl.getName());
            comp.assignQualifierParameter(true);
            break;
        default:
            jj_la1[19] = jj_gen;
            comp.curValues = new MofcCIMValue();
            comp.assignQualifierParameter(false);
        }
    }

    final public void qualifierFlavor() throws ParseException {
        jj_consume_token(COLON);
        qualifierFlavorList();
    }

    final public void qualifierFlavorList() throws ParseException {
        CIMFlavor s;
        label_5:
        while (true) {
            s = flavor();
            comp.assignQualifierFlavor(s);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ENABLEOVERRIDE:
            case DISABLEOVERRIDE:
            case TOSUBCLASS:
            case RESTRICTED:
            case TRANSLATABLE:
                ;
                break;
            default:
                jj_la1[20] = jj_gen;
                break label_5;
            }
        }
    }

    /*
// ------------------------------------------------------------------------
// Class Declaration
// (set classes, classAliases)
// (Unit)
// ------------------------------------------------------------------------
*/
    final public void classDeclaration() throws ParseException, CIMException {
        classHead();
        classBody();
        classTail();
    }

    final public void classHead() throws ParseException, CIMException {
        jj_consume_token(CLASS);
        className();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case AS:
            classAlias();
            break;
        default:
            jj_la1[21] = jj_gen;
            ;
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case COLON:
            classSuperClassName();
            break;
        default:
            jj_la1[22] = jj_gen;
            ;
        }
        comp.curLevel = "CLASS";
        if (comp.erroneousQualifierList) {
            comp.erroneousUnit = true;
            comp.qualifiers = new Vector();
            comp.reportError("ERR_SEM", "ERR_QUALIFIER_LIST_STR", 1,
                    comp.curClassEl.getName());
        } else {
            comp.assignClassQualifiers();
        }
    }

    final public void classBody() throws ParseException, CIMException {
        jj_consume_token(OPEN_CUR_BRA);
        classFeatureList();
        jj_consume_token(CLOSE_CUR_BRA);
    }

    final public void classTail() throws ParseException, CIMException {
        jj_consume_token(SEMICOLON);
        comp.addClass();
        //comp.curLevel="";
        comp.erroneousUnit = false;
        comp.erroneousPart = false;
    }

    final public void className() throws ParseException, CIMException {
        Token t;
        t = jj_consume_token(IDENTIFIER);
        comp.assignClassName(t.image);
    }

    final public void classAlias() throws ParseException {
        Token t;
        jj_consume_token(AS);
        t = jj_consume_token(ALIAS_IDENTIFIER);
        comp.assignClassAlias(t.image);
    }

    final public void classSuperClassName() throws ParseException {
        Token t;
        jj_consume_token(COLON);
        t = jj_consume_token(IDENTIFIER);
        comp.assignSuperclassName(t.image);
    }

    final public void classFeatureList() throws ParseException, CIMException {
        label_6:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case DT_UINT8:
            case DT_SINT8:
            case DT_UINT16:
            case DT_SINT16:
            case DT_UINT32:
            case DT_SINT32:
            case DT_UINT64:
            case DT_SINT64:
            case DT_REAL32:
            case DT_REAL64:
            case DT_CHAR16:
            case DT_STR:
            case DT_BOOL:
            case DT_DATETIME:
            case IDENTIFIER:
            case OPEN_SQU_BRA:
                ;
                break;
            default:
                jj_la1[23] = jj_gen;
                break label_6;
            }
            classFeature();
        }
    }

    final public void classFeature() throws ParseException, CIMException {
        if (jj_2_1(2147483647)) {
            propertyDeclaration();
        } else if (jj_2_2(2147483647)) {
            methodDeclaration();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IDENTIFIER:
            case OPEN_SQU_BRA:
                referenceDeclaration();
                break;
            default:
                jj_la1[24] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }

    /*
// ------------------------------------------------------------------------
// Property Declaration
// (set properties)
// (Part)
// ------------------------------------------------------------------------
*/
    final public void propertyDeclaration() throws ParseException, CIMException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case DT_UINT8:
        case DT_SINT8:
        case DT_UINT16:
        case DT_SINT16:
        case DT_UINT32:
        case DT_SINT32:
        case DT_UINT64:
        case DT_SINT64:
        case DT_REAL32:
        case DT_REAL64:
        case DT_CHAR16:
        case DT_STR:
        case DT_BOOL:
        case DT_DATETIME:
            propertyHead();
            propertyBody();
            propertyTail();
            break;
        case OPEN_SQU_BRA:
            qualifierList();
            propertyHead();
            propertyBody();
            propertyTail();
            break;
        default:
            jj_la1[25] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void propertyHead() throws ParseException, CIMException {
        dataType();
        propertyName();
        comp.curLevel = "PROPERTY";
        if (comp.erroneousQualifierList) {
            comp.erroneousUnit = true;
            comp.qualifiers = new Vector();
            comp.reportError("ERR_SEM", "ERR_QUALIFIER_LIST_STR", 1,
                    comp.curPropRefEl.getName());
        } else {
            comp.assignPropertyQualifiers();
        }
    }

    final public void propertyBody() throws ParseException, CIMException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case OPEN_SQU_BRA:
            propertyArray_ArrayInit();
            break;
        default:
            jj_la1[26] = jj_gen;
            propertySimpleInit();
        }
    }

    final public void propertyArray_ArrayInit() throws ParseException, CIMException {
        array();
        int simpleType = comp.curType.getType();
        // Create a new array data type.
        comp.curType = new CIMDataType(CIMDataType.findArrayType(simpleType),
                comp.size);
        comp.curPropRefEl.setType(comp.curType);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case EQUAL:
            jj_consume_token(EQUAL);
            arrayInitializer();
            if (!comp.erroneousPart) {
                if (!comp.curValues.isEmpty()) {
                    CIMValue cv = new CIMValue(comp.curValues.vVector);
                    comp.curPropRefEl.setValue(cv);
                }
            }
            comp.curValues = new MofcCIMValue();
            break;
        default:
            jj_la1[27] = jj_gen;
            ;
        }
    }

    final public void propertySimpleInit() throws ParseException, CIMException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case EQUAL:
            jj_consume_token(EQUAL);
            simpleInitializer();
            comp.curPropRefEl.setType(comp.curType);
            if (!comp.erroneousPart) {
                if (!comp.curValues.isEmpty()) {
                    Object o = comp.curValues.vVector.firstElement();
                    comp.curPropRefEl.setValue(new CIMValue(o));
                }
            }
            comp.curValues = new MofcCIMValue();
            break;
        default:
            jj_la1[28] = jj_gen;
            //do nothing
            comp.curPropRefEl.setType(comp.curType);
        }
    }

    final public void propertyTail() throws ParseException {
        jj_consume_token(SEMICOLON);
        comp.addProperty();
        //comp.curLevel="";
        comp.erroneousPart = false;
    }

    final public void propertyName() throws ParseException, CIMException {
        String s;
        s = nameToken();
        comp.assignFeatureName(s);
    }

    /*
// ------------------------------------------------------------------------
// Reference Declaration
// (set properties)
// (Part)
// ------------------------------------------------------------------------
*/
    final public void referenceDeclaration() throws ParseException, CIMException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case IDENTIFIER:
            referenceHead();
            referenceBody();
            referenceTail();
            break;
        case OPEN_SQU_BRA:
            qualifierList();
            referenceHead();
            referenceBody();
            referenceTail();
            break;
        default:
            jj_la1[29] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void referenceHead() throws ParseException, CIMException {
        referenceObject();
        referenceName();
        comp.curLevel = "REFERENCE";
        if (comp.erroneousQualifierList) {
            comp.erroneousUnit = true;
            comp.qualifiers = new Vector();
            comp.reportError("ERR_SEM", "ERR_QUALIFIER_LIST_STR", 1,
                    comp.curPropRefEl.getName());
        } else {
            comp.assignReferenceQualifiers();
        }
    }

    final public void referenceBody() throws ParseException, CIMException {
        referenceInitializer();
    }

    final public void referenceTail() throws ParseException {
        jj_consume_token(SEMICOLON);
        comp.addReference();
        //comp.curLevel="";
        comp.erroneousPart = false;
    }

    final public void referenceName() throws ParseException, CIMException {
        String s;
        s = nameToken();
        comp.assignFeatureName(s);
    }

    final public void referenceObject() throws ParseException {
        objectRef();
        comp.assignRefClassName(comp.curType);
    }

    final public void referenceInitializer() throws ParseException, CIMException {
        Token t;
        String s;
        CIMValue cv;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case ALIAS_IDENTIFIER:
            t = jj_consume_token(ALIAS_IDENTIFIER);
            comp.curValues.addElement(comp.getInstanceName(t.image));
            cv = new CIMValue(comp.curValues.firstElement());
            comp.curPropRefEl.setValue(cv);
            comp.curValues = new MofcCIMValue();
            break;
        case STRING_VALUE:
            s = objectPath();
            comp.curValues.addElement(new String(s));
            cv = new CIMValue(comp.curValues.firstElement());
            comp.curPropRefEl.setValue(cv);
            comp.curValues = new MofcCIMValue();
            break;
        default:
            jj_la1[30] = jj_gen;

        }
    }

    /*
// ------------------------------------------------------------------------
// Method Declaration
// (set methods)
// (Part)
// ------------------------------------------------------------------------
*/
    final public void methodDeclaration() throws ParseException, CIMException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case DT_UINT8:
        case DT_SINT8:
        case DT_UINT16:
        case DT_SINT16:
        case DT_UINT32:
        case DT_SINT32:
        case DT_UINT64:
        case DT_SINT64:
        case DT_REAL32:
        case DT_REAL64:
        case DT_CHAR16:
        case DT_STR:
        case DT_BOOL:
        case DT_DATETIME:
            methodHead();
            methodBody();
            methodTail();
            break;
        case OPEN_SQU_BRA:
            qualifierList();
            methodHead();
            methodBody();
            methodTail();
            break;
        default:
            jj_la1[31] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void methodHead() throws ParseException, CIMException {
        dataType();
        methodName();
        comp.curLevel = "METHOD";
        comp.curMethodEl.setType(comp.curType);
        if (comp.erroneousQualifierList) {
            comp.erroneousUnit = true;
            comp.qualifiers = new Vector();
            comp.reportError("ERR_SEM", "ERR_QUALIFIER_LIST_STR", 1,
                    comp.curMethodEl.getName());
        } else {
            comp.assignMethodQualifiers();
        }
    }

    final public void methodBody() throws ParseException, CIMException {
        if (jj_2_3(2)) {
            jj_consume_token(OPEN_BRA);
            methodParameterList();
            jj_consume_token(CLOSE_BRA);
            comp.assignMethodParameters();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case OPEN_BRA:
                jj_consume_token(OPEN_BRA);
                jj_consume_token(CLOSE_BRA);
                break;
            default:
                jj_la1[32] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }

    final public void methodTail() throws ParseException {
        jj_consume_token(SEMICOLON);
        comp.addMethod();
        //comp.curLevel="";
        comp.erroneousPart = false;
    }

    final public void methodName() throws ParseException, CIMException {
        String s;
        s = nameToken();
        comp.assignFeatureName(s);
    }

    final public void methodParameterList() throws ParseException, CIMException {
        parameter();
        comp.addParameter();
        label_7:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case COMMA:
                ;
                break;
            default:
                jj_la1[33] = jj_gen;
                break label_7;
            }
            jj_consume_token(COMMA);
            parameter();
            comp.addParameter();
        }
    }

    /*
// ------------------------------------------------------------------------
// MethodParameter Declaration
// (set parameters)
// (Part)
// ------------------------------------------------------------------------
*/
    final public void parameter() throws ParseException, CIMException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case DT_UINT8:
        case DT_SINT8:
        case DT_UINT16:
        case DT_SINT16:
        case DT_UINT32:
        case DT_SINT32:
        case DT_UINT64:
        case DT_SINT64:
        case DT_REAL32:
        case DT_REAL64:
        case DT_CHAR16:
        case DT_STR:
        case DT_BOOL:
        case DT_DATETIME:
        case IDENTIFIER:
            parameterHead();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case OPEN_SQU_BRA:
                parameterBody();
                break;
            default:
                jj_la1[34] = jj_gen;
                ;
            }
            parameterTail();
            break;
        case OPEN_SQU_BRA:
            qualifierList();
            parameterHead();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case OPEN_SQU_BRA:
                parameterBody();
                break;
            default:
                jj_la1[35] = jj_gen;
                ;
            }
            parameterTail();
            break;
        default:
            jj_la1[36] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void parameterHead() throws ParseException, CIMException {
        parameterDataType();
        parameterName();
        comp.curLevel = "PARAMETER";
        if (comp.erroneousQualifierList) {
            comp.erroneousUnit = true;
            comp.qualifiers = new Vector();
            comp.reportError("ERR_SEM", "ERR_QUALIFIER_LIST_STR", 1,
                    comp.curParameterEl.getName());
        } else {
            comp.assignParameterQualifiers();
        }
    }

    final public void parameterBody() throws ParseException, CIMException {
        array();
        int simpleType = comp.curType.getType();
        if (comp.size == CIMDataType.SIZE_UNLIMITED &&
                simpleType == CIMDataType.REFERENCE) {
            comp.curType = new CIMDataType(
                    comp.curType.getRefClassName(), comp.size);
        } else {
            comp.curType = new CIMDataType(CIMDataType.findArrayType(simpleType),
                    comp.size);
        }
        comp.curParameterEl.setType(comp.curType);
    }

    final public void parameterTail() throws ParseException {

    }

    final public void parameterDataType() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case DT_UINT8:
        case DT_SINT8:
        case DT_UINT16:
        case DT_SINT16:
        case DT_UINT32:
        case DT_SINT32:
        case DT_UINT64:
        case DT_SINT64:
        case DT_REAL32:
        case DT_REAL64:
        case DT_CHAR16:
        case DT_STR:
        case DT_BOOL:
        case DT_DATETIME:
            dataType();
            comp.curParameterEl.setType(comp.curType);
            break;
        case IDENTIFIER:
            objectRef();
            comp.curParameterEl.setType(comp.curType);
            break;
        default:
            jj_la1[37] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void parameterName() throws ParseException, CIMException {
        String s;
        s = nameToken();
        comp.assignParameterName(s);
    }

    /*
// ------------------------------------------------------------------------
// Instance Declaration
// (set instances)
// (Unit)
// ------------------------------------------------------------------------
*/
    final public void instanceDeclaration() throws ParseException, CIMException {
        instanceHead();
        instanceBody();
        instanceTail();
    }

    final public void instanceHead() throws ParseException, CIMException {
        jj_consume_token(INSTANCE);
        jj_consume_token(OF);
        instanceClassName();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case AS:
            instanceAlias();
            break;
        default:
            jj_la1[38] = jj_gen;
            ;
        }
        comp.curLevel = "INSTANCE";
        if (comp.erroneousQualifierList) {
            comp.erroneousUnit = true;
            comp.reportError("ERR_SEM", "ERR_QUALIFIER_LIST_STR", 1,
                    comp.curInstanceEl.getObjectPath().toString());
        } else {
            comp.assignInstanceQualifiers();
        }
    }

    final public void instanceBody() throws ParseException, CIMException {
        jj_consume_token(OPEN_CUR_BRA);
        instancePropertyList();
        jj_consume_token(CLOSE_CUR_BRA);
    }

    final public void instanceTail() throws ParseException, CIMException {
        jj_consume_token(SEMICOLON);
        comp.addInstance();
        //comp.curLevel="";
        comp.erroneousUnit = false;
        comp.erroneousPart = false;
    }

    final public void instanceClassName() throws ParseException {
        Token t;
        t = jj_consume_token(IDENTIFIER);
        comp.assignInstanceClass(t.image);
    }

    final public void instanceAlias() throws ParseException {
        Token t;
        jj_consume_token(AS);
        t = jj_consume_token(ALIAS_IDENTIFIER);
        comp.assignInstanceAlias(t.image);
    }

    final public void instancePropertyList() throws ParseException, CIMException {
        label_8:
        while (true) {
            instanceProperty();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IDENTIFIER:
            case OPEN_SQU_BRA:
                ;
                break;
            default:
                jj_la1[39] = jj_gen;
                break label_8;
            }
        }
    }

    final public void instanceProperty() throws ParseException, CIMException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case IDENTIFIER:
            instancePropertyBody();
            break;
        case OPEN_SQU_BRA:
            qualifierList();
            instancePropertyBody();
            break;
        default:
            jj_la1[40] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void instancePropertyBody() throws ParseException, CIMException {
        Token t;
        t = jj_consume_token(IDENTIFIER);
        comp.curLevel = "INSTANCEPROPERTY";
        comp.curIPropertyEl.setName(t.image);

        if (!comp.erroneousUnit) {
            if (comp.erroneousQualifierList) {
                comp.reportError("ERR_SEM", "ERR_QUALIFIER_LIST_STR", 1,
                        comp.curPropRefEl.getName());
            } else {
                comp.assignInstancePropertyQualifiers();
            }
        }
        jj_consume_token(EQUAL);
        initializer();
        comp.addInstanceProperty();
        comp.erroneousPart = false;
        jj_consume_token(SEMICOLON);
    }

    /*
// ------------------------------------------------------------------------
// Data Type Declaration
// (set size , curType)
// (Part)
// ------------------------------------------------------------------------
*/
    final public void objectRef() throws ParseException {
        Token t;
        t = jj_consume_token(IDENTIFIER);
        jj_consume_token(REF);
        comp.curType = new CIMDataType(t.image);
        comp.size = CIMDataType.SIZE_SINGLE;
    }

    final public String objectPath() throws ParseException {
        String s;
        s = multiStringValue();
        {
            if (true) {
                return s;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void array() throws ParseException {
        Token t;
        jj_consume_token(OPEN_SQU_BRA);
        comp.size = CIMDataType.SIZE_UNLIMITED;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case POS_DECIMAL_VALUE:
            t = jj_consume_token(POS_DECIMAL_VALUE);
            comp.size = Integer.parseInt(t.image);
            break;
        default:
            jj_la1[41] = jj_gen;
            ;
        }
        jj_consume_token(CLOSE_SQU_BRA);
    }

    final public void dataType() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case DT_UINT8:
        case DT_SINT8:
        case DT_UINT16:
        case DT_SINT16:
        case DT_UINT32:
        case DT_SINT32:
        case DT_UINT64:
        case DT_SINT64:
            intDataType();
            break;
        case DT_REAL32:
        case DT_REAL64:
            realDataType();
            break;
        case DT_CHAR16:
            jj_consume_token(DT_CHAR16);
            comp.size = CIMDataType.SIZE_SINGLE;
            comp.curType = new CIMDataType(CIMDataType.CHAR16);
            break;
        case DT_STR:
            jj_consume_token(DT_STR);
            comp.size = CIMDataType.SIZE_SINGLE;
            comp.curType = new CIMDataType(CIMDataType.STRING);
            break;
        case DT_BOOL:
            jj_consume_token(DT_BOOL);
            comp.size = CIMDataType.SIZE_SINGLE;
            comp.curType = new CIMDataType(CIMDataType.BOOLEAN);
            break;
        case DT_DATETIME:
            jj_consume_token(DT_DATETIME);
            comp.size = CIMDataType.SIZE_SINGLE;
            comp.curType = new CIMDataType(CIMDataType.DATETIME);
            break;
        default:
            jj_la1[42] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void intDataType() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case DT_UINT8:
            jj_consume_token(DT_UINT8);
            comp.size = CIMDataType.SIZE_SINGLE;
            comp.curType = new CIMDataType(CIMDataType.UINT8);
            break;
        case DT_SINT8:
            jj_consume_token(DT_SINT8);
            comp.size = CIMDataType.SIZE_SINGLE;
            comp.curType = new CIMDataType(CIMDataType.SINT8);
            break;
        case DT_UINT16:
            jj_consume_token(DT_UINT16);
            comp.size = CIMDataType.SIZE_SINGLE;
            comp.curType = new CIMDataType(CIMDataType.UINT16);
            break;
        case DT_SINT16:
            jj_consume_token(DT_SINT16);
            comp.size = CIMDataType.SIZE_SINGLE;
            comp.curType = new CIMDataType(CIMDataType.SINT16);
            break;
        case DT_UINT32:
            jj_consume_token(DT_UINT32);
            comp.size = CIMDataType.SIZE_SINGLE;
            comp.curType = new CIMDataType(CIMDataType.UINT32);
            break;
        case DT_SINT32:
            jj_consume_token(DT_SINT32);
            comp.size = CIMDataType.SIZE_SINGLE;
            comp.curType = new CIMDataType(CIMDataType.SINT32);
            break;
        case DT_UINT64:
            jj_consume_token(DT_UINT64);
            comp.size = CIMDataType.SIZE_SINGLE;
            comp.curType = new CIMDataType(CIMDataType.UINT64);
            break;
        case DT_SINT64:
            jj_consume_token(DT_SINT64);
            comp.size = CIMDataType.SIZE_SINGLE;
            comp.curType = new CIMDataType(CIMDataType.SINT64);
            break;
        default:
            jj_la1[43] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void realDataType() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case DT_REAL32:
            jj_consume_token(DT_REAL32);
            comp.size = CIMDataType.SIZE_SINGLE;
            comp.curType = new CIMDataType(CIMDataType.REAL32);
            break;
        case DT_REAL64:
            jj_consume_token(DT_REAL64);
            comp.size = CIMDataType.SIZE_SINGLE;
            comp.curType = new CIMDataType(CIMDataType.REAL64);
            break;
        default:
            jj_la1[44] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    /*
// ------------------------------------------------------------------------
// Default + Initialzer Declaration
// (set curValues, curValueType)
// (Part)
// ------------------------------------------------------------------------
*/
    final public void initializer() throws ParseException, CIMException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case TRUE_VALUE:
        case FALSE_VALUE:
        case NULL_VALUE:
        case BINARY_VALUE:
        case OCTAL_VALUE:
        case POS_DECIMAL_VALUE:
        case NEG_DECIMAL_VALUE:
        case ZERO:
        case HEX_VALUE:
        case REAL_VALUE:
        case STRING_VALUE:
        case CHAR_VALUE:
        case ALIAS_IDENTIFIER:
            simpleInitializer();
            if (!comp.erroneousPart) {
                Object o = comp.curValues.vVector.firstElement();
                comp.curIPropertyEl.setValue(new CIMValue(o));
            }
            comp.curValues = new MofcCIMValue();
            break;
        case OPEN_CUR_BRA:
            arrayInitializer();
            if (!comp.erroneousPart) {
                Vector v = comp.curValues.vVector;
                comp.curIPropertyEl.setValue(new CIMValue(v));
            }
            comp.curValues = new MofcCIMValue();
            break;
        default:
            jj_la1[45] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void arrayInitializer() throws ParseException, CIMException {
        jj_consume_token(OPEN_CUR_BRA);
        simpleInitializerList();
        jj_consume_token(CLOSE_CUR_BRA);
        comp.curValues.setIsArrayValue(true);
    }

    final public void simpleInitializerList() throws ParseException, CIMException {
        simpleInitializer();
        label_9:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case COMMA:
                ;
                break;
            default:
                jj_la1[46] = jj_gen;
                break label_9;
            }
            jj_consume_token(COMMA);
            simpleInitializer();
        }
    }

    final public void simpleInitializer() throws ParseException, CIMException {
        constantValue();
        comp.curValues.setIsArrayValue(false);
        // comp.check_Type_ValueType();

    }

    final public void constantValue() throws ParseException, CIMException {
        String s;
        Token t;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case BINARY_VALUE:
        case OCTAL_VALUE:
        case POS_DECIMAL_VALUE:
        case NEG_DECIMAL_VALUE:
        case ZERO:
            s = integerValue();
            if (s.charAt(0) == '-') {
                comp.curValues.addElement(new Long(s));
            } else {
                comp.curValues.addElement(new UnsignedInt64(s));
            }
            comp.curValueType = "INT";
            break;
        case HEX_VALUE:
            s = integerValue();
            if (s.charAt(0) == '-') {
                comp.curValues.addElement(new Long(s));
            } else {
                comp.curValues.addElement(new UnsignedInt64(
                        new BigInteger(s.substring(s.indexOf('x') + 1), 16)));
            }
            comp.curValueType = "INT";
            break;
        case REAL_VALUE:
            t = jj_consume_token(REAL_VALUE);
            comp.curValues.addElement(new Double(t.image));
            comp.curValueType = "REAL";
            break;
        case CHAR_VALUE:
            t = jj_consume_token(CHAR_VALUE);
            Character ch = new Character(parseCharacter(t.image));
            comp.curValues.addElement(ch);
            comp.curValueType = "CHAR";
            break;
        case STRING_VALUE:
            s = multiStringValue();
            comp.curValues.addElement(s);
            comp.curValueType = "STRING";
            break;
        case TRUE_VALUE:
        case FALSE_VALUE:
            s = booleanValue();
            comp.curValues.addElement(new Boolean(s));
            comp.curValueType = "BOOLEAN";
            break;
        case NULL_VALUE:
            t = jj_consume_token(NULL_VALUE);
            comp.curValues.addElement(null);
            comp.curValueType = "ANY";
            break;
        case ALIAS_IDENTIFIER:
            t = jj_consume_token(ALIAS_IDENTIFIER);
            comp.curValues.addElement(comp.getInstanceName(t.image));
            comp.curValueType = "ALIAS";
            break;
        default:
            jj_la1[47] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public String integerValue() throws ParseException {
        Token t;
        String s;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case BINARY_VALUE:
            t = jj_consume_token(BINARY_VALUE);
        {
            if (true) {
                return t.image;
            }
        }
        break;
        case OCTAL_VALUE:
            t = jj_consume_token(OCTAL_VALUE);
        {
            if (true) {
                return t.image;
            }
        }
        break;
        case POS_DECIMAL_VALUE:
        case NEG_DECIMAL_VALUE:
        case ZERO:
            s = decimalValue();
        {
            if (true) {
                return s;
            }
        }
        break;
        case HEX_VALUE:
            t = jj_consume_token(HEX_VALUE);
        {
            if (true) {
                return t.image;
            }
        }
        break;
        default:
            jj_la1[48] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final public String decimalValue() throws ParseException {
        Token t;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case POS_DECIMAL_VALUE:
            t = jj_consume_token(POS_DECIMAL_VALUE);
            break;
        case ZERO:
            t = jj_consume_token(ZERO);
            break;
        case NEG_DECIMAL_VALUE:
            t = jj_consume_token(NEG_DECIMAL_VALUE);
            break;
        default:
            jj_la1[49] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if (true) {
                return t.image;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public String multiStringValue() throws ParseException {
        Token t;
        String s = "";
        label_10:
        while (true) {
            t = jj_consume_token(STRING_VALUE);
            s = s + parseString(t.image);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case STRING_VALUE:
                ;
                break;
            default:
                jj_la1[50] = jj_gen;
                break label_10;
            }
        }
        {
            if (true) {
                return s;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public String booleanValue() throws ParseException {
        Token t;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case TRUE_VALUE:
            t = jj_consume_token(TRUE_VALUE);
            break;
        case FALSE_VALUE:
            t = jj_consume_token(FALSE_VALUE);
            break;
        default:
            jj_la1[51] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if (true) {
                return t.image;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_1();
        jj_save(0, xla);
        return retval;
    }

    final private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_2();
        jj_save(1, xla);
        return retval;
    }

    final private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_3();
        jj_save(2, xla);
        return retval;
    }

    final private boolean jj_3R_76() {
        if (jj_scan_token(DT_SINT64)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_19() {
        if (jj_3R_28()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_29()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_75() {
        if (jj_scan_token(DT_UINT64)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_48() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_47()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_74() {
        if (jj_scan_token(DT_SINT32)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_33() {
        if (jj_3R_47()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_48()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_15() {
        if (jj_3R_22()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_19()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_20()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_21()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_73() {
        if (jj_scan_token(DT_UINT32)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_14() {
        if (jj_3R_19()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_20()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_21()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_11() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_14()) {
            jj_scanpos = xsp;
            if (jj_3R_15()) {
                return true;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_114() {
        if (jj_scan_token(FALSE_VALUE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_113() {
        if (jj_scan_token(TRUE_VALUE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_72() {
        if (jj_scan_token(DT_SINT16)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_2() {
        if (jj_3R_12()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_106() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_113()) {
            jj_scanpos = xsp;
            if (jj_3R_114()) {
                return true;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_1() {
        if (jj_3R_11()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_32() {
        if (jj_scan_token(OPEN_SQU_BRA)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_71() {
        if (jj_scan_token(DT_UINT16)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_70() {
        if (jj_scan_token(DT_SINT8)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_112() {
        if (jj_scan_token(STRING_VALUE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_102() {
        if (jj_3R_44()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_22() {
        if (jj_3R_32()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_33()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_34()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_105() {
        Token xsp;
        if (jj_3R_112()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_112()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_50() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_69()) {
            jj_scanpos = xsp;
            if (jj_3R_70()) {
                jj_scanpos = xsp;
                if (jj_3R_71()) {
                    jj_scanpos = xsp;
                    if (jj_3R_72()) {
                        jj_scanpos = xsp;
                        if (jj_3R_73()) {
                            jj_scanpos = xsp;
                            if (jj_3R_74()) {
                                jj_scanpos = xsp;
                                if (jj_3R_75()) {
                                    jj_scanpos = xsp;
                                    if (jj_3R_76()) {
                                        return true;
                                    }
                                    if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                        return false;
                                    }
                                } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                    return false;
                                }
                            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                return false;
                            }
                        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                            return false;
                        }
                    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                        return false;
                    }
                } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                    return false;
                }
            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_69() {
        if (jj_scan_token(DT_UINT8)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_68() {
        if (jj_3R_86()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_123() {
        if (jj_scan_token(NEG_DECIMAL_VALUE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_122() {
        if (jj_scan_token(ZERO)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_121() {
        if (jj_scan_token(POS_DECIMAL_VALUE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_49() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_67()) {
            jj_scanpos = xsp;
            if (jj_3R_68()) {
                return true;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_67() {
        if (jj_3R_28()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_43() {
        if (jj_scan_token(DT_DATETIME)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_119() {
        if (jj_scan_token(TRANSLATABLE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_120() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_121()) {
            jj_scanpos = xsp;
            if (jj_3R_122()) {
                jj_scanpos = xsp;
                if (jj_3R_123()) {
                    return true;
                }
                if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                    return false;
                }
            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_118() {
        if (jj_scan_token(TOSUBCLASS)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_117() {
        if (jj_scan_token(RESTRICTED)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_42() {
        if (jj_scan_token(DT_BOOL)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_116() {
        if (jj_scan_token(DISABLEOVERRIDE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_91() {
        return false;
    }

    final private boolean jj_3R_115() {
        if (jj_scan_token(ENABLEOVERRIDE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_111() {
        if (jj_scan_token(HEX_VALUE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_41() {
        if (jj_scan_token(DT_STR)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_110() {
        if (jj_3R_120()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_107() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_115()) {
            jj_scanpos = xsp;
            if (jj_3R_116()) {
                jj_scanpos = xsp;
                if (jj_3R_117()) {
                    jj_scanpos = xsp;
                    if (jj_3R_118()) {
                        jj_scanpos = xsp;
                        if (jj_3R_119()) {
                            return true;
                        }
                        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                            return false;
                        }
                    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                        return false;
                    }
                } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                    return false;
                }
            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_109() {
        if (jj_scan_token(OCTAL_VALUE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_108() {
        if (jj_scan_token(BINARY_VALUE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_104() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_108()) {
            jj_scanpos = xsp;
            if (jj_3R_109()) {
                jj_scanpos = xsp;
                if (jj_3R_110()) {
                    jj_scanpos = xsp;
                    if (jj_3R_111()) {
                        return true;
                    }
                    if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                        return false;
                    }
                } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                    return false;
                }
            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_40() {
        if (jj_scan_token(DT_CHAR16)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_39() {
        if (jj_3R_51()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_38() {
        if (jj_3R_50()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_28() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_38()) {
            jj_scanpos = xsp;
            if (jj_3R_39()) {
                jj_scanpos = xsp;
                if (jj_3R_40()) {
                    jj_scanpos = xsp;
                    if (jj_3R_41()) {
                        jj_scanpos = xsp;
                        if (jj_3R_42()) {
                            jj_scanpos = xsp;
                            if (jj_3R_43()) {
                                return true;
                            }
                            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                return false;
                            }
                        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                            return false;
                        }
                    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                        return false;
                    }
                } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                    return false;
                }
            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_103() {
        if (jj_3R_59()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_100() {
        if (jj_scan_token(ALIAS_IDENTIFIER)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_79() {
        if (jj_scan_token(POS_DECIMAL_VALUE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_99() {
        if (jj_scan_token(NULL_VALUE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_59() {
        if (jj_scan_token(OPEN_SQU_BRA)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_79()) {
            jj_scanpos = xsp;
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(CLOSE_SQU_BRA)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_98() {
        if (jj_3R_106()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_58() {
        if (jj_scan_token(SOURCE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_57() {
        if (jj_scan_token(LOCALE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_56() {
        if (jj_scan_token(REFERENCE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_55() {
        if (jj_scan_token(INDICATION)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_54() {
        if (jj_scan_token(ASSOCIATION)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_97() {
        if (jj_3R_105()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_53() {
        if (jj_scan_token(SCHEMA)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_52() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_37() {
        if (jj_3R_49()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_102()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_44() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_52()) {
            jj_scanpos = xsp;
            if (jj_3R_53()) {
                jj_scanpos = xsp;
                if (jj_3R_54()) {
                    jj_scanpos = xsp;
                    if (jj_3R_55()) {
                        jj_scanpos = xsp;
                        if (jj_3R_56()) {
                            jj_scanpos = xsp;
                            if (jj_3R_57()) {
                                jj_scanpos = xsp;
                                if (jj_3R_58()) {
                                    return true;
                                }
                                if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                    return false;
                                }
                            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                return false;
                            }
                        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                            return false;
                        }
                    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                        return false;
                    }
                } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                    return false;
                }
            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_96() {
        if (jj_scan_token(CHAR_VALUE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_92() {
        if (jj_3R_103()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_86() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(REF)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_27() {
        if (jj_3R_22()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_37()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_92()) {
            jj_scanpos = xsp;
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_91()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_95() {
        if (jj_scan_token(REAL_VALUE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_90() {
        if (jj_3R_103()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_26() {
        if (jj_3R_37()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_90()) {
            jj_scanpos = xsp;
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_91()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_18() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_26()) {
            jj_scanpos = xsp;
            if (jj_3R_27()) {
                return true;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_94() {
        if (jj_3R_104()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_88() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_94()) {
            jj_scanpos = xsp;
            if (jj_3R_95()) {
                jj_scanpos = xsp;
                if (jj_3R_96()) {
                    jj_scanpos = xsp;
                    if (jj_3R_97()) {
                        jj_scanpos = xsp;
                        if (jj_3R_98()) {
                            jj_scanpos = xsp;
                            if (jj_3R_99()) {
                                jj_scanpos = xsp;
                                if (jj_3R_100()) {
                                    return true;
                                }
                                if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                    return false;
                                }
                            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                return false;
                            }
                        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                            return false;
                        }
                    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                        return false;
                    }
                } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                    return false;
                }
            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_29() {
        if (jj_3R_44()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_66() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_18()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_81() {
        if (jj_3R_88()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_93() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_81()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_21() {
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_13() {
        if (jj_3R_18()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_66()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_87() {
        if (jj_3R_81()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_93()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_101() {
        if (jj_3R_107()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_62() {
        return false;
    }

    final private boolean jj_3R_35() {
        if (jj_3R_44()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_89() {
        Token xsp;
        if (jj_3R_101()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_101()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_80() {
        if (jj_scan_token(OPEN_CUR_BRA)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_87()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(CLOSE_CUR_BRA)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_85() {
        if (jj_scan_token(COLON)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_89()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_25() {
        if (jj_scan_token(SEMICOLON)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_46() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_61()) {
            jj_scanpos = xsp;
            if (jj_3R_62()) {
                return true;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_61() {
        if (jj_scan_token(EQUAL)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_81()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_84() {
        return false;
    }

    final private boolean jj_3R_36() {
        if (jj_scan_token(OPEN_BRA)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(CLOSE_BRA)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_83() {
        if (jj_3R_80()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_3() {
        if (jj_scan_token(OPEN_BRA)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_13()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(CLOSE_BRA)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_24() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_3()) {
            jj_scanpos = xsp;
            if (jj_3R_36()) {
                return true;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_60() {
        if (jj_scan_token(EQUAL)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_80()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_82() {
        if (jj_scan_token(OPEN_BRA)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_81()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(CLOSE_BRA)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_64() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_82()) {
            jj_scanpos = xsp;
            if (jj_3R_83()) {
                jj_scanpos = xsp;
                if (jj_3R_84()) {
                    return true;
                }
                if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                    return false;
                }
            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_63() {
        if (jj_3R_44()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_45() {
        if (jj_3R_59()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_60()) {
            jj_scanpos = xsp;
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_65() {
        if (jj_3R_85()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_23() {
        if (jj_3R_28()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_35()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_78() {
        if (jj_scan_token(DT_REAL64)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_31() {
        if (jj_3R_46()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_47() {
        if (jj_3R_63()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_64()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_65()) {
            jj_scanpos = xsp;
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_30() {
        if (jj_3R_45()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_20() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_30()) {
            jj_scanpos = xsp;
            if (jj_3R_31()) {
                return true;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_51() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_77()) {
            jj_scanpos = xsp;
            if (jj_3R_78()) {
                return true;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_77() {
        if (jj_scan_token(DT_REAL32)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_17() {
        if (jj_3R_22()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_23()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_24()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_25()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_12() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_16()) {
            jj_scanpos = xsp;
            if (jj_3R_17()) {
                return true;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_16() {
        if (jj_3R_23()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_24()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_25()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_34() {
        if (jj_scan_token(CLOSE_SQU_BRA)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    public CIM_MofcTokenManager token_source;
    JavaCharStream jj_input_stream;
    public Token token, jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    public boolean lookingAhead = false;
    private boolean jj_semLA;
    private int jj_gen;
    final private int[] jj_la1 = new int[52];
    final private int[] jj_la1_0 = { 0x24020380, 0x24020380, 0x0, 0x4020000, 0x24020380, 0x0, 0x180, 0x1e400, 0x2c6800, 0x0, 0x0, 0x0, 0x0, 0x1fe0800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10000000,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };
    final private int[] jj_la1_1 = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x5000000, 0x0, 0x0, 0x80000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x0, 0x0, 0x0, 0x1f, 0x0, 0x0, 0x8007ffe0, 0x80000000, 0x7ffe0,
            0x0, 0x0, 0x0, 0x80000000, 0x20000000, 0x7ffe0, 0x0, 0x0, 0x0, 0x0, 0x8007ffe0, 0x8007ffe0, 0x0, 0x80000000, 0x80000000, 0x1000000, 0x7ffe0, 0x1fe0, 0x6000, 0x7ff80000, 0x0, 0x7ff80000,
            0xfc00000, 0x7000000, 0x20000000, 0x180000, };
    final private int[] jj_la1_2 = { 0x100, 0x100, 0x100, 0x0, 0x100, 0x0, 0x0, 0x0, 0x0, 0x100, 0x20, 0x20, 0x4, 0x0, 0x4, 0x4, 0x0, 0x4, 0x8, 0x440, 0x0, 0x0, 0x8, 0x100, 0x100, 0x100, 0x100, 0x20,
            0x20, 0x100, 0x1, 0x100, 0x400, 0x4, 0x100, 0x100, 0x100, 0x0, 0x0, 0x100, 0x100, 0x0, 0x0, 0x0, 0x0, 0x41, 0x4, 0x1, 0x0, 0x0, 0x0, 0x0, };
    final private JJCalls[] jj_2_rtns = new JJCalls[3];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    public CIM_Mofc(java.io.InputStream stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new CIM_MofcTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 52; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    public void ReInit(java.io.InputStream stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 52; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    public CIM_Mofc(java.io.Reader stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new CIM_MofcTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 52; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 52; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    public CIM_Mofc(CIM_MofcTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 52; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    public void ReInit(CIM_MofcTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 52; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    final private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) {
                            c.first = null;
                        }
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    final private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) {
                jj_add_error_token(kind, i);
            }
        }
        return (jj_scanpos.kind != kind);
    }

    final public Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    final public Token getToken(int index) {
        Token t = lookingAhead ? jj_scanpos : token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    final private int jj_ntk() {
        if ((jj_nt = token.next) == null) {
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        } else {
            return (jj_ntk = jj_nt.kind);
        }
    }

    private java.util.Vector jj_expentries = new java.util.Vector();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) {
            return;
        }
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            boolean exists = false;
            for (java.util.Enumeration enum=jj_expentries.elements();
            enum.hasMoreElements();){
                int[] oldentry = (int[]) ( enum.nextElement());
                if (oldentry.length == jj_expentry.length) {
                    exists = true;
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            exists = false;
                            break;
                        }
                    }
                    if (exists) {
                        break;
                    }
                }
            }
            if (!exists) {
                jj_expentries.addElement(jj_expentry);
            }
            if (pos != 0) {
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
            }
        }
    }

    final public ParseException generateParseException() {
        jj_expentries.removeAllElements();
        boolean[] la1tokens = new boolean[76];
        for (int i = 0; i < 76; i++) {
            la1tokens[i] = false;
        }
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 52; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 76; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.addElement(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = (int[]) jj_expentries.elementAt(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    final public void enable_tracing() {
    }

    final public void disable_tracing() {
    }

    final private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 3; i++) {
            JJCalls p = jj_2_rtns[i];
            do {
                if (p.gen > jj_gen) {
                    jj_la = p.arg;
                    jj_lastpos = jj_scanpos = p.first;
                    switch (i) {
                    case 0:
                        jj_3_1();
                        break;
                    case 1:
                        jj_3_2();
                        break;
                    case 2:
                        jj_3_3();
                        break;
                    }
                }
                p = p.next;
            } while (p != null);
        }
        jj_rescan = false;
    }

    final private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
