/* Generated By:JavaCC: Do not edit this line. CIM_Prep.java */
package org.wbemservices.wbem.compiler.prep;
import java.io.*;
import java.util.*;

public class CIM_Prep implements CIM_PrepConstants {
    
    public String pre_FileName;
    public Hashtable FileNameTable = new Hashtable();
    public ByteArrayOutputStream bos = new ByteArrayOutputStream(); 
    public DataOutputStream dos = new DataOutputStream(bos);
    /* 
     * added for i18n - the code that uses this follows the current way
     * the byte array works - all this code should be rewritten as this
     * is a very poor way to do it (e.g. all var should be encapsulated, etc.)
     */ 
    public CharArrayWriter cw = new CharArrayWriter();
    private boolean ASCII = true;
    
/* The filePath argument is the absolutePath to the main file.
   This is used for the include files if they are not stated
   as absolute in the pragma include.
 */
    final public void ExpressionList(String filePath, boolean idempotent) throws ParseException, IOException {
        Token t;
        label_1:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case SINGLE_LINE_COMMENT:
                    case MULTI_LINE_COMMENT:
                    case CHAR:
                    case PRE_PRAGMA:
                        ;
                        break;
                        default:
                            jj_la1[0] = jj_gen;
                            break label_1;
                }
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case CHAR:
                        t = jj_consume_token(CHAR);
                        dos.writeBytes(t.image);
                        cw.write(t.image);
                        break;
                    case SINGLE_LINE_COMMENT:
                        t = jj_consume_token(SINGLE_LINE_COMMENT);
                        dos.writeBytes(t.image);
                        cw.write(t.image);
                        break;
                    case MULTI_LINE_COMMENT:
                        t = jj_consume_token(MULTI_LINE_COMMENT);
                        dos.writeBytes(t.image);
                        cw.write(t.image);
                        break;
                    case PRE_PRAGMA:
                        t = jj_consume_token(PRE_PRAGMA);
                        String pragmaString;
                        CIM_Prep parser;
                        
                        if (filePath == null) {
                            filePath = "";
                        }
                        pragmaString = t.image;
                        int FirstQuote = pragmaString.indexOf('"');
                        int LastQuote = pragmaString.lastIndexOf('"');
                        String Filename = 
                            pragmaString.substring(FirstQuote + 1, LastQuote);
                        
                        /* The following will look for the file as follows
                         *(1) If filename is an absolute path to the file, use it
                         *(2) If not it must be relative to the parent file 
                         *    (same dir or path relative to)
                         *(3) Check in the default directory
                         *This routine also changes fileName to be an absolute path
                         *NOTE: This routing does not actually check for the existence of the
                         *      file. 
                         */
                        File f = new File(Filename);
                        if (!f.isAbsolute()) {
                            String parent = new File(pre_FileName).getParent();
                            if (parent != null) {
                                f = new File(parent, Filename);
                                Filename = f.getAbsolutePath();
                            }
                        }
                        
                        if (!f.exists()) {
                            throw new IOException("File " + Filename + 
                            " not found");
                        } 
                        
                        if(!idempotent || !FileNameTable.containsKey(Filename)) {
                            FileNameTable.put(Filename,Filename);
                              
                            FileInputStream fis = new FileInputStream(f.getAbsolutePath());
                            try {
                                parser = new CIM_Prep(fis, f.getAbsolutePath());
                                parser.dos = dos;
                                parser.FileNameTable = FileNameTable;
                                dos.writeBytes("##FILE \"" + Filename + "\"\n");
                                cw.write("##FILE \"" + Filename + "\"\n");
                                parser.pre_FileName = Filename;
                                parser.ExpressionList(filePath, idempotent);
                                fis.close();
                                dos.writeBytes("##FILE \"" + pre_FileName + "\"\n");
                                cw.write("##FILE \"" + pre_FileName + "\"\n");
                                dos.writeBytes("##LINE " + (t.endLine-1) + "\n");
                                cw.write("##LINE " + (t.endLine-1) + "\n");
                            } catch(Exception e) {
                                System.out.println(e);
                                System.exit(1);
                            } finally {
                                // Clean up the file.
                                if (fis != null) {
                                    fis.close();
                                }
                            }
                        }
                        break;
                        default:
                            jj_la1[1] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                }
            }
            jj_consume_token(0);
    }
    
    public boolean isASCII() {
        return ASCII;
    }
    
    //This routine will open the file, look at the first four 
    //bytes to determine if the file is ASCII or UNICODE
    private void isFileASCII(String fileName) {
        byte[] buf = new byte[4];
        try {
            
            FileInputStream in = new FileInputStream(fileName);
            in.read(buf);
            in.close();
            
        
            if ((buf[0] == (byte)0xef && buf[1] == (byte)0xbb && buf[2] == (byte)0xbf) || //UTF8
               (buf[0] == (byte)0xff && buf[1] == (byte)0xfe) || //ucs-2le, ucs-4le, ucs-16le
               (buf[0] == (byte)0xfe && buf[1] == (byte)0xff) || //utf-16 && ucs-2
               (buf[0] == 0 && buf[1] == 0 && buf[2] == (byte)0xfe && buf[3] == (byte)0xff)) { //ucs 4 
               ASCII = false;
            } else {
               ASCII = true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    public CIM_PrepTokenManager token_source;
    JavaCharStream jj_input_stream;
    public Token token, jj_nt;
    private int jj_ntk;
    private int jj_gen;
    final private int[] jj_la1 = new int[2];
    final private int[] jj_la1_0 = {0x1e,0x1e,};
    
    public CIM_Prep(java.io.InputStream stream, String fileName) {
        try {
           
            isFileASCII(fileName);
            if (isASCII()) {
                jj_input_stream = new JavaCharStream(stream, 1, 1);
            } else {
                jj_input_stream = new JavaCharStream(new InputStreamReader(stream, "Unicode"), 1, 1);
            }
            
            token_source = new CIM_PrepTokenManager(jj_input_stream);
            token = new Token();
            jj_ntk = -1;
            jj_gen = 0;
            for (int i = 0; i < 2; i++) jj_la1[i] = -1;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void ReInit(java.io.InputStream stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 2; i++) jj_la1[i] = -1;
    }
    
    public CIM_Prep(java.io.Reader stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new CIM_PrepTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 2; i++) jj_la1[i] = -1;
    }
    
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 2; i++) jj_la1[i] = -1;
    }
    
    public CIM_Prep(CIM_PrepTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 2; i++) jj_la1[i] = -1;
    }
    
    public void ReInit(CIM_PrepTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 2; i++) jj_la1[i] = -1;
    }
    
    final private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }
    
    final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }
    
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }
    
    final private int jj_ntk() {
        if ((jj_nt=token.next) == null)
            return (jj_ntk = (token.next=token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }
    
    private java.util.Vector jj_expentries = new java.util.Vector();
    private int[] jj_expentry;
    private int jj_kind = -1;
    
    final public ParseException generateParseException() {
        jj_expentries.removeAllElements();
        boolean[] la1tokens = new boolean[5];
        for (int i = 0; i < 5; i++) {
            la1tokens[i] = false;
        }
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 2; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1<<j)) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 5; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.addElement(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = (int[])jj_expentries.elementAt(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }
    
    final public void enable_tracing() {
    }
    
    final public void disable_tracing() {
    }
    
}
